// -------------------------------------- //
//  PURSUIT MODE BASE by domino54         //
//  script version: 2018-04-21            //
// -------------------------------------- //

#Extends "Modes/TrackMania/Base/ModeTrackmania.Script.txt"

#Const PUR_Version		"2018-04-21"
#Const PUR_ScriptName	"Modes/TrackMania/ModePursuit.Script.txt"

#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/ScoresTable2.Script.txt" as ST2
#Include "Libs/Nadeo/Sound.Script.txt" as Sound
// Custom libraries
#Include "Libs/domino54/AltTabs.Script.txt" as AltTabs
#Include "Libs/domino54/Blacklist.Script.txt" as Blacklist
#Include "Libs/domino54/Characters.Script.txt" as Characters
#Include "Libs/domino54/Chat.Script.txt" as Chat
#Include "Libs/domino54/CupAdmin.Script.txt" as CupAdmin
#Include "Libs/domino54/CustomNames.Script.txt" as Names
#Include "Libs/domino54/DiscordWebhooks.Script.txt" as DiscordWebhooks
#Include "Libs/domino54/FakeUsers.Script.txt" as FakeUsers
#Include "Libs/domino54/FancyMessages.Script.txt" as FancyMessages
#Include "Libs/domino54/Killfeed.Script.txt" as Killfeed
#Include "Libs/domino54/ManialinkTools.Script.txt" as ManialinkTools
#Include "Libs/domino54/MapSelection.Script.txt" as MapSelection
#Include "Libs/domino54/Minimap2.Script.txt" as Minimap
#Include "Libs/domino54/Models.Script.txt" as Models
#Include "Libs/domino54/MultiClans.Script.txt" as Clans
#Include "Libs/domino54/PauseMenu2.Script.txt" as PauseMenu
#Include "Libs/domino54/ServerManager.Script.txt" as ServerManager
#Include "Libs/domino54/StoragePlayer.Script.txt" as StoragePlayer
#Include "Libs/domino54/Streaks.Script.txt" as Streaks
#Include "Libs/domino54/TopScores.Script.txt" as TopScores
#Include "Libs/domino54/Translations.Script.txt" as Translations
#Include "Libs/domino54/WebLayers.Script.txt" as WebLayers
#Include "Libs/domino54/TrackMania/CylinderHitbox.Script.txt" as CylinderHitbox
#Include "Libs/domino54/TrackMania/OffZone.Script.txt" as OffZone
#Include "Libs/domino54/TrackMania/PursuitUI.Script.txt" as PursuitUI

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_EnableCharSelection	True	as _("Allow players to choose their vehicle")
#Setting S_CharSelectionTime	10		as _("Vehicle selection display duration (s)")
#Setting S_LagoonCarUnlockMode	0		as _("Lagoon Car availability [0 - Lagoon, 1 - unlocked, 2 - purchase]")
#Setting S_EnableCollisions		True	as _("Enable collisions")
#Setting S_ResetScoreLeavers	True	as _("Reset scores of players that left the game at the match end")
#Setting S_UseLegacyHitbox		True	as _("Use old hit detection system")
#Setting S_NbFakeUsers			0		as _("Number of fake players")
#Setting S_UseCustomChat		False	as _("Enable custom chat")
#Setting S_UseInstantRespawn	True	as _("Use instant respawn")
#Setting S_DisableCameraFree	False	as _("Disable free camera (Cam 7)")
#Setting S_DiscordChatWebhhook	""		as "<hidden>" ///< Link to a Discord webhook used for chat logs. 
#Setting S_AFKIdleTimeLimit		120		as "<hidden>" ///< AFK default idle time limit
#Setting S_CustomLayersURLs		""		as "<hidden>" ///< Try to load custom layers from an URL
#Setting S_CustomBlacklistURL	""		as "<hidden>" ///< URL of the custom blacklist file
#Setting S_UseKillfeedNotices	True	as "<hidden>" ///< For server hosters: defines if notices are Killfeed or messages
#Setting S_KillfeedOffsetY		0.		as "<hidden>" ///< For server hosters: Killfeed Y offset
#Setting S_MusicPlaylistURL		""		as "<hidden>" ///< URL of the server custom music playlist file
#Setting S_EnableMapSelection	True	as "<hidden>" ///< Allow players to choose which map they want to play next
#Setting S_WebhookURL			""		as "<hidden>" ///< URL of the webhook to send notifications

/// Competition settings
#Setting S_AdminEnableCupMode		False	as "<hidden>"
#Setting S_AdminCupModeNbMaps		3		as "<hidden>"
#Setting S_AdminPauseCompetition	False	as "<hidden>"
#Setting S_AdminCupName				""		as "<hidden>"

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ImgBase "file://Media/Manialinks/TrackMania/Pursuit/"
#Const C_OfflineTranslationsURL	"file://Media/Translations/Default.xml"
#Const C_OnlineTranslationsURL	"http://raw.githubusercontent.com/domino54/title-packs/master/Media/Translations/Default.xml"
#Const C_CharactersDataFileURL	"file://Media/Characters/Pursuit.xml"
#Const C_InterfaceFont_Medium	"Eurostile"
#Const C_InterfaceFont_Bold		"Eurostile_Bold"
#Const C_PlayerSpawnDuration	1500	///< Duration of the countdown before starting race.
#Const C_NoInteractionDuration	3000	///< Time after player respawn.
#Const C_HitboxSphereDiameter	3.5		///< Diameter of player hitbox sphere (deprecated).
#Const C_CamperDetectionTime	30000	///< Time before mode detects thief as a camper.
#Const C_CamperAbortDistance	50.		///< Distance to drive to abort automatic respawn.
#Const C_CamperUpdateDistance	32.		///< Distance to drive to reset camping timer.
#Const C_LagoonCarDuration		1800	///< Duration for which Lagoon Car is available atfer purchase.
#Const C_DefaultKillfeedPosn	<159., 89., -5.>	///< Default position of the Killfeed layer.
#Const C_SoundsBaseVolume		-5.

// ---------------------------------- //
// Extends
// ---------------------------------- //
***Match_LogVersions***
***
Log::RegisterScript(PUR_ScriptName, PUR_Version);
Log::RegisterScript(AltTabs::GetScriptName(), AltTabs::GetScriptVersion());
Log::RegisterScript(Blacklist::GetScriptName(), Blacklist::GetScriptVersion());
Log::RegisterScript(Characters::GetScriptName(), Characters::GetScriptVersion());
Log::RegisterScript(Chat::GetScriptName(), Chat::GetScriptVersion());
Log::RegisterScript(Clans::GetScriptName(), Clans::GetScriptVersion());
Log::RegisterScript(CupAdmin::GetScriptName(), CupAdmin::GetScriptVersion());
Log::RegisterScript(CylinderHitbox::GetScriptName(), CylinderHitbox::GetScriptVersion());
Log::RegisterScript(FakeUsers::GetScriptName(), FakeUsers::GetScriptVersion());
Log::RegisterScript(DiscordWebhooks::GetScriptName(), DiscordWebhooks::GetScriptVersion());
Log::RegisterScript(FancyMessages::GetScriptName(), FancyMessages::GetScriptVersion());
Log::RegisterScript(Killfeed::GetScriptName(), Killfeed::GetScriptVersion());
Log::RegisterScript(ManialinkTools::GetScriptName(), ManialinkTools::GetScriptVersion());
Log::RegisterScript(MapSelection::GetScriptName(), MapSelection::GetScriptVersion());
Log::RegisterScript(Models::GetScriptName(), Models::GetScriptVersion());
Log::RegisterScript(OffZone::GetScriptName(), OffZone::GetScriptVersion());
Log::RegisterScript(PauseMenu::GetScriptName(), PauseMenu::GetScriptVersion());
Log::RegisterScript(PursuitUI::GetScriptName(), PursuitUI::GetScriptVersion());
Log::RegisterScript(ServerManager::GetScriptName(), ServerManager::GetScriptVersion());
Log::RegisterScript(StoragePlayer::GetScriptName(), StoragePlayer::GetScriptVersion());
Log::RegisterScript(TopScores::GetScriptName(), TopScores::GetScriptVersion());
Log::RegisterScript(Translations::GetScriptName(), Translations::GetScriptVersion());
Log::RegisterScript(WebLayers::GetScriptName(), WebLayers::GetScriptVersion());
***

// ---------------------------------- //
// Disable unnecessary Nadeo stuff
// ---------------------------------- //
***Match_Settings***
***		
MB_Settings_UseDefaultIntroSequence = False;
MB_Settings_UseDefaultUIManagement = False;
MB_Settings_UseDefaultHud = False;
MB_Settings_UseDefaultClansScoresUI = False;
MB_Settings_UseDefaultSounds = False;
MB_Settings_UseDefaultRespawnBehaviour = False;
***

// ---------------------------------- //
// Scores table
// ---------------------------------- //
***ScoresTable***
***
ST2::SetSize(<60., 11.>, <162., 59.5>, <160., 15.5>);
ST2::SetBackgroundProperties(<0., 5.>, <200., 100.>);
ST2::SetModeIcon("Icons64x64_1|Opponents");
ST2::SetTeamsScoresVisibility(False);
ST2::SetPlayerDarkening(True);
ST2::SetPos(<0., 39.2, 20.>);
ST2::SetTextScale(.875);
ST2::SetFormat(2, 8);

// ---------------------------------- //
// Columns
ST2::SetColWidth("LibST_Avatar", 2.5);
ST2::SetColWidth("LibST_Tags", 0.);
ST2::SetColWidth("LibST_ManiaStars", 2.5);
ST2::SetColWidth("LibST_Tools", 1.5);

// ---------------------------------- //
// Score points
ST2::CreateCol("LibST_TMPoints", _("Score"), "0", 5., 100.);
ST2::CreateCol("PUR_Vehicle", "ï†¹", "", 2., 50.);
ST2::SetColTextAlign("LibST_TMPoints", CMlControl::AlignHorizontal::Right);
ST2::SetColTextSize("LibST_TMPoints", 3.);
ST2::SetColScript("LibST_TMPoints", """
declare Score <=> (_Score as CTmScore);
Label_Col.Value = TL::ToText(Score.Points);""");
***

// ---------------------------------- //
// Set up the pause menu
// ---------------------------------- //
***Pursuit_PauseMenu***
***
PauseMenu::SetButtonIcon("LibPM_ModeHelp", C_ImgBase^"Icons/Help.png");
PauseMenu::SetButtonIcon("LibPM_Spectator", C_ImgBase^"Icons/Spectator.png");
PauseMenu::SetButtonIcon("LibPM_SaveReplay", C_ImgBase^"Icons/Recording.png");
PauseMenu::SetButtonIcon("LibPM_ChangeTeam", C_ImgBase^"Icons/Versus.png");
PauseMenu::SetButtonIcon("LibPM_ManageServer", C_ImgBase^"Icons/Server.png");
PauseMenu::SetButtonIcon("LibPM_TitleSettings", C_ImgBase^"Icons/AdvancedSettings.png");
PauseMenu::SetButtonLabel("LibPM_TitleSettings", "Pursuit Settings");

// Custom server manager window
PauseMenu::CreateButton("PUR_ServerManager", "Players List (ALPHA)", C_ImgBase^"Icons/MatesHealed.png", 4.5);
PauseMenu::SetButtonScript("PUR_ServerManager", """
CloseInGameMenu(::EInGameMenuResult::Resume);
declare Boolean LibServerManager_ToggleShowWindow for This;
LibServerManager_ToggleShowWindow = True;
""");

// Storage Music Player button
PauseMenu::CreateButton("PUR_StoragePlayer", "Storage Player", C_ImgBase^"Icons/Headphones.png", 6.);
PauseMenu::SetButtonScript("PUR_StoragePlayer", """
CloseInGameMenu(::EInGameMenuResult::Resume);
declare Boolean LibStoragePlayer_ToggleShowWindow for This;
LibStoragePlayer_ToggleShowWindow = True;
""");

// Character selection button
PauseMenu::CreateButton("PUR_CharSelection", "Change vehicle", C_ImgBase^"Icons/CanyonCar.png", 7.);
PauseMenu::SetButtonScript("PUR_CharSelection", """
CloseInGameMenu(::EInGameMenuResult::Resume);
declare Boolean LibCharacters_ToggleShowWindow for This;
LibCharacters_ToggleShowWindow = True;
""");

// Official Discord server button
PauseMenu::CreateButton("PUR_JoinDiscord", "Join Discord", C_ImgBase^"Icons/Discord.png", 8.);
PauseMenu::SetButtonScript("PUR_JoinDiscord", """
CloseInGameMenu(::EInGameMenuResult::Resume);
OpenLink("https://discordapp.com/invite/BBHC3sT", CMlScript::LinkType::ExternalBrowser);
""");
***

// ---------------------------------- //
// Start server
// ---------------------------------- //
***Match_StartServer***
***
IndependantLaps = True;
Replay_AutoStart = False;
RespawnBehaviour = CTmMode::ETMRespawnBehaviour::DoNothing;

WarmUp::SetAvailability(False);

/**
 *	Force round/lap synchro of the cars
 *	In time attack mode the synchro of the car is less strict, 
 *	creating a small delay between the real position of the player 
 *	and the position of his car on the screen
 */
UiRounds = True;
UiLaps = True;

// Load models
Models::Load();
Models::LoadCanyonCar("Canyon Interceptor.Skin.Pack.Gbx");

// ---------------------------------- //
// Download translations
Translations::Load([C_OfflineTranslationsURL/*, C_OnlineTranslationsURL*/]);
while (!Translations::LoadingLoop()) MB_Yield();

// ---------------------------------- //
// Initialize UI
UIManager.UIAll.OverlayHidePersonnalBestAndRank = True;
UIManager.UIAll.OverlayHideSpectatorControllers = True;
UIManager.UIAll.OverlayHideCheckPointList = True;
UIManager.UIAll.OverlayHideCheckPointTime = True;
UIManager.UIAll.OverlayHideRoundScores = True;
UIManager.UIAll.OverlayHidePosition = True;
UIManager.UIAll.OverlayHideChrono = True;
UiDisableHelpMessage = True;

// ---------------------------------- //
// Load characters
Characters::Load(C_CharactersDataFileURL);
while (Characters::IsBeingImported()) MB_Yield();
Characters::Build(C_InterfaceFont_Medium, C_InterfaceFont_Bold);

// ---------------------------------- //
// Create custom interfaces
PursuitUI::Load(["Countdown", "Speedometer", "Background", "SafeTime", "RespawnTimer", "SpecInfo", "321Go"]);
PursuitUI::SetSafeTimeDuration(C_NoInteractionDuration);
//PursuitUI::SetModuleVisibility("321Go", !S_UseInstantRespawn);
PursuitUI::SetCamera7Forbidden(S_DisableCameraFree);
MapSelection::Load(C_InterfaceFont_Medium, C_InterfaceFont_Bold);

// Custom teams
for (Clan, 1, 10) PursuitUI::SetTeamColor(Clan, Clans::GetClanColor(Clan));

// ---------------------------------- //
// Pause menu
PauseMenu::Load("file://Media/Settings/Pursuit.xml");
while (PauseMenu::LoadingLoop()) MB_Yield();
+++Pursuit_PauseMenu+++
PauseMenu::Build(C_InterfaceFont_Medium);

ServerManager::Load();

// ---------------------------------- //
// Load custom tabs
AltTabs::Load();
AltTabs::SetFont(C_InterfaceFont_Medium);
TopScores::Load();
TopScores::SetBackground(C_ImgBase^"topsBg.dds", <182., 182.>, <0., 12.5>);
TopScores::SetFont(C_InterfaceFont_Medium, C_InterfaceFont_Bold);

// ---------------------------------- //
// Create scores table
ST2::Load();
ST2::SetStyle("LibST_TMBaseSolo");
+++ScoresTable+++
ST2::Build("TM");
TopScores::Build();

// ---------------------------------- //
// Load Killfeed library
Killfeed::Load();
Killfeed::SetPosition(C_DefaultKillfeedPosn + <0., S_KillfeedOffsetY, 0.>);
Killfeed::AddTranslations(["$<%1$> rests in the OffZone", "$<%1$> tried to escape the arena", "$<%1$> somehow fell below map", "$<%1$> was forced into the Police team", "$<%1$> tried to swim"]);
Killfeed::SetTextFont(C_InterfaceFont_Medium);
Killfeed::SetMapSwitching(True);

// Load streaks
Streaks::Load(C_ImgBase^"/Streaks/");

// ---------------------------------- //
// Load Fancy Messages
FancyMessages::Load();
FancyMessages::FormatBigMessage(<0., 54., 0.>, "RajdhaniMono", 8);
FancyMessages::FormatStatusMessage(<0., 62., 0.>, "RajdhaniMono", 3);

// Load the sound library
Sound::Load();
Sound::Attach();

// Cuatom chat
Chat::Load(C_InterfaceFont_Medium);

// ---------------------------------- //
// Load the Storage Music Player
StoragePlayer::Load(C_ImgBase, C_InterfaceFont_Medium, C_InterfaceFont_Bold);
StoragePlayer::SetDefaultPlaylistURL("");

// Other
Minimap::Load(C_ImgBase^"/Minimap/");
Killfeed::Build();
***

***MB_Private_AfterLoadMap***
***
Killfeed::SetMapSwitching(False);
***

// ---------------------------------- //
// Start map
// ---------------------------------- //
***Match_InitMap***
***
ST2::ClearScores();
TopScores::MatchBegin();
TM::WaitRaceAll();
OffZone::StartMap();
CupAdmin::StartMap();
FancyMessages::ResetData();
MapSelection::StartMap();
PUR_DisableTimeLimit();

declare PrevEnableCharSelection = S_EnableCharSelection;
declare PrevLagoonCarUnlockMode = S_LagoonCarUnlockMode;
declare PrevDisableCameraFree = S_DisableCameraFree;
***

***Match_StartMap***
***
// ---------------------------------- //
// Init characters menu
Characters::SetOpenplanetRequired(Map.CollectionName == "Stadium");
PUR_UpdateLagoonCar(S_LagoonCarUnlockMode);

PauseMenu::SetButtonVisibility("PUR_CharSelection", S_EnableCharSelection);
if (S_EnableCharSelection) Characters::Manual();
else Characters::Hide();

// ---------------------------------- //
// Split screen players names
foreach (Player in Players) {
	switch (Player.User.Login) {
		case "*splitscreen_0*" : Names::Set(Player, "$07FAlpha");
		case "*splitscreen_1*" : Names::Set(Player, "$F53Beta");
		case "*splitscreen_2*" : Names::Set(Player, "$4F2Gamma");
		case "*splitscreen_3*" : Names::Set(Player, "$B3FDelta");
	}
}
***

// ---------------------------------- //
// Initialize round
// ---------------------------------- //
***Match_InitRound***
***
ST2::ClearScores();
TopScores::RoundBegin();
***

// ---------------------------------- //
// Mode global loop
// ---------------------------------- //
***Match_Yield***
***
Blacklist::Loop(S_CustomBlacklistURL);
Characters::Loop();
Chat::Loop(S_UseCustomChat, S_DiscordChatWebhhook);
CupAdmin::Loop(S_AdminEnableCupMode, S_AdminPauseCompetition, S_AdminCupModeNbMaps, S_AdminCupName);
DiscordWebhooks::Loop();
FancyMessages::Loop();
FakeUsers::UpdateAmount(S_NbFakeUsers);
Killfeed::Loop();
Message::Loop();
PursuitUI::Loop();
ServerManager::Loop();
StoragePlayer::UpdatePlaylistURL(S_MusicPlaylistURL);
Streaks::Loop();
WebLayers::Update(S_CustomLayersURLs);
***

***Match_StartPlayLoop***
***
Minimap::Show();
***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***Match_PlayLoop***
***
// ---------------------------------- //
// Custom chat commands
foreach (CommandId in Chat::PendingCommands()) {
	declare CommandPlayer	<=> Chat::GetCommandPlayer(CommandId);
	declare CommandName		= Chat::GetCommandName(CommandId);
	declare CommandParams	= Chat::GetCommandParams(CommandId);
	if (CommandPlayer == Null) continue;

	declare SenderPerms = ServerManager::Private_GetPlayerPerms(CommandPlayer.User.Login);

	// Insufficient permissions to perform the command
	if (ServerManager::C_LibServerManager_Perms_Moderator > SenderPerms) {
		ServerManager::SendChat(CommandPlayer, "You don't have permissions to use this command!");
		continue;
	}

	switch (CommandName) {
		// ---------------------------------- //
		// Lagoon Car unlock conditions
		case "lagooncar" : {
			if (CommandParams.count <= 0) continue;
			declare Msg = "";

			switch (TL::ToInteger(CommandParams[0])) {
				// Available
				case 1 : {
					Characters::SetPurchaseTimeout(-1);
					Characters::SetCharAvailable(3, True);
					Msg = "$<%1$> set Lagoon Car availability to: available for everyone!";
				}

				// Purchaseable
				case 2 : {
					Characters::SetPurchaseTimeout(1800000);
					Characters::SetCharAvailable(3, True);
					Msg = "$<%1$> set Lagoon Car availability to: purchaseable!";
				}
				
				// Locked
				default : {
					Characters::SetPurchaseTimeout(-1);
					Characters::SetCharAvailable(3, False);
					Msg = "$<%1$> set Lagoon Car availability to: locked!";
				}
			}

			ServerManager::SendChat([Msg, CommandPlayer.User.Name]);
		}
	}
}

// ---------------------------------- //
// Characters setting change
if (PrevEnableCharSelection != S_EnableCharSelection) {
	PrevEnableCharSelection = S_EnableCharSelection;
	
	PauseMenu::SetButtonVisibility("PUR_CharSelection", S_EnableCharSelection);
	if (S_EnableCharSelection) Characters::Manual();
	else Characters::Hide();
}

// ---------------------------------- //
// Update Lagoon Car availability
if (PrevLagoonCarUnlockMode != S_LagoonCarUnlockMode) {
	PrevLagoonCarUnlockMode = S_LagoonCarUnlockMode;
	PUR_UpdateLagoonCar(S_LagoonCarUnlockMode);
}

// ---------------------------------- //
// Update camera free availability
if (PrevDisableCameraFree != S_DisableCameraFree) {
	PrevDisableCameraFree = S_DisableCameraFree;
	PursuitUI::SetCamera7Forbidden(S_DisableCameraFree);
}
***

***Match_EndPlayLoop***
***
Minimap::Hide();
***

// ---------------------------------- //
// Before closing ladder
// ---------------------------------- //
***Match_BeforeCloseLadder***
***
// Ensure that we stop the match (after a vote for the next map, ...)
MB_StopMatch();

// ---------------------------------- //
// Reset scores of spectators and players that left the game
if (S_ResetScoreLeavers) {
	foreach (Score in Scores) {
		declare Player <=> TM::GetPlayer(Score.User.Login);
		if (Player == Null || Player.RequestsSpectate) Score.Points = 0;
	}
}

// Select winner
MB_SortScores(CTmMode::ETmScoreSortOrder::TotalPoints);
Scores::SetDefaultLadderSort(Scores::C_Sort_MapPoints);
Scores::SetPlayerWinner(Scores::GetBestPlayer(Scores::C_Sort_MapPoints, Scores::Order_Descending()));
TopScores::MatchEnd();
***

// ---------------------------------- //
// After podium sequence
// ---------------------------------- //
***Match_AfterPodiumSequence***
***
CupAdmin::EndMap();
while (CupAdmin::IsCupEnd()) MB_Yield();
***

// ---------------------------------- //
// Before unloading a map
// ---------------------------------- //
***Match_BeforeUnloadMap***
***
// ---------------------------------- //
// Let players vote for the next map
if (!MM_IsMatchServer() && S_EnableMapSelection && MapSelection::SelectionStart(Now + 10750, True)) {
	while (!MapSelection::SelectionLoop() && !MatchEndRequested && !ServerShutdownRequested) MB_Yield();
	MB_Sleep(3000);
	MapSelection::SelectionEnd();
}
***

// ---------------------------------- //
// Avoid fake join/leave mesages
// ---------------------------------- //
***MB_Private_BeforeUnloadMap***
***
Killfeed::SetMapSwitching(True);
OffZone::EndMap();
***

// ---------------------------------- //
// End server
// ---------------------------------- //
***Match_EndServer***
***
AltTabs::Unload();
Characters::Unload();
FancyMessages::Unload();
Killfeed::Unload();
MapSelection::Unload();
PursuitUI::Unload();
Sound::Unload();
StoragePlayer::Unload();
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Set the new time limit.
 *
 *	@param	_NewEndTime		New value for the time limit.
 *	@param	_ResetMusic		If True, music will be reset with the timer.
 */
Void PUR_SetTimeLimit(Integer _NewEndTime, Boolean _ResetMusic) {
	CutOffTimeLimit = ML::Max(_NewEndTime, -1);
	if (CutOffTimeLimit > 0 || (CutOffTimeLimit <= 0 && _ResetMusic)) StoragePlayer::SetCountdown(CutOffTimeLimit, 30000);
}

// ---------------------------------- //
/** Set the new time limit without using ticking sounds.
 *
 *	@param	_NewEndTime		New value for the time limit.
 */
Void PUR_SetTimeLimit(Integer _NewEndTime) {
	PUR_SetTimeLimit(_NewEndTime, False);
}

// ---------------------------------- //
/** Check if the time has reached its limit.
 *
 *	@return		True, if time has reached its limit.
 */
Boolean PUR_TimeReachedLimit() {
	return CutOffTimeLimit > 0 && Now > CutOffTimeLimit;
}

// ---------------------------------- //
/// Disable the time limit.
Void PUR_DisableTimeLimit() {
	PUR_SetTimeLimit(-1, True);
}

// ---------------------------------- //
/** Check if the player can interact with others
 *
 *	@param	_Player		The player to check
 *
 *	@return		True, if the player can interact
 */
Boolean PUR_CanInteract(CTmPlayer _Player) {
	return _Player != Null && _Player.IsSpawned && Now >= _Player.RaceStartTime + C_NoInteractionDuration;
}

// ---------------------------------- //
/** Give points to a player.
 *
 *	@param	_Player		A Player to give points.
 *	@param	_Amount		Amount of points to give.
 */
Void PUR_AddPoints(CTmPlayer _Player, Integer _Amount) {
	if (_Player == Null || _Player.Score == Null || _Amount == 0) return;
	Scores::AddPlayerMapPoints(_Player.Score, _Amount);
	Scores_Sort(CTmMode::ETmScoreSortOrder::TotalPoints);
}

// ---------------------------------- //
/** Get number of players in given clan.
 *
 *	@param	_Clan	The clan to get players number.
 *
 *	@return		Number of players in given clan.
 */
Integer PUR_GetClanNbPlayers(Integer _Clan) {
	if (UseClans) {
		if (ClansNbPlayers.existskey(_Clan)) return ClansNbPlayers[_Clan];
		return 0;
	}
	return Clans::GetClanNbPlayers(_Clan);
}

// ---------------------------------- //
/** Get the clan of a player.
 *
 *	@param	_Player		The player to get their clan.
 *
 *	@return		Clan of the player.
 */
Integer PUR_GetPlayerClan(CTmPlayer _Player) {
	if (_Player == Null) return 0;
	if (UseClans) return _Player.CurrentClan;
	return Clans::GetPlayerClan(_Player);
}

// ---------------------------------- //
/** Set player clan.
 *
 *	@param	_Player		A Player to respawn.
 *	@param	_Clan		Clan to set.
 */
Void PUR_SetPlayerClan(CTmPlayer _Player, Integer _Clan) {
	if (_Player == Null) return;
	
	// ---------------------------------- //
	// Classic clans
	if (UseClans) {
		if (_Player.IsSpawned) TM::WaitRace(_Player);
		SetPlayerClan(_Player, _Clan);
		Clans::SetPlayerClan(_Player, 0);
		PursuitUI::SetPlayerClan(_Player, 0);
	}
	// ---------------------------------- //
	// Custom clans
	else {
		Clans::SetPlayerClan(_Player, _Clan);
		PursuitUI::SetPlayerClan(_Player, _Clan);

		if (_Player.CurrentClan != 0) {
			if (_Player.IsSpawned) TM::WaitRace(_Player);
			SetPlayerClan(_Player, 0);
		}
	}
}

// ---------------------------------- //
/** Check if 2 players are touching.
 *
 *	@param	_Player1	Player #1.
 *	@param	_Player2	Player #2.
 *
 *	@return		True, if both players' vehicles touch.
 */
Boolean PUR_AreTouching(CTmPlayer _Player1, CTmPlayer _Player2) {
	if (_Player1 == Null || _Player2 == Null) return False;
	if (_Player1.Position == <0., 0., 0.> || _Player2.Position == <0., 0., 0.>) return False;
	if (S_UseLegacyHitbox) return ML::Distance(_Player1.Position, _Player2.Position) <= C_HitboxSphereDiameter;
	return CylinderHitbox::AreTouching(_Player1, _Player2);
}

// ---------------------------------- //
/// Display character selection screen.
Void PUR_ShowCharSelection() {
	if (!S_EnableCharSelection || S_CharSelectionTime <= 0) return;
	if (!MB_MapIsRunning() || MB_GetRoundCount() != 1) return;

	declare SelectionEndTime = Now + S_CharSelectionTime * 1000;
	Characters::SetDisplayEndTime(SelectionEndTime);

	Characters::Show();
	while (MB_MapIsRunning() && Now < SelectionEndTime) MB_Yield();
	Characters::Manual();
}

// ---------------------------------- //
/** Update Lagoon Car availability.
 *
 *	@param	_LagoonCarMode		Lagoon Car mode.
 */
Void PUR_UpdateLagoonCar(Integer _LagoonCarMode) {
	// Lagoon Car always available in Lagoon
	if (Map != Null && Map.CollectionName == "Lagoon") {
		Characters::SetPurchaseTimeout(-1);
		Characters::SetCharAvailable(3, True);
	}

	// Apply the setting
	else switch (_LagoonCarMode) {
		// Available
		case 1 : {
			Characters::SetPurchaseTimeout(-1);
			Characters::SetCharAvailable(3, True);
		}

		// Purchase
		case 2: {
			Characters::SetPurchaseTimeout(C_LagoonCarDuration * 1000);
			Characters::SetCharAvailable(3, True);
		}

		// Locked
		default : {
			Characters::SetPurchaseTimeout(-1);
			Characters::SetCharAvailable(3, False);
		}
	}
}

// ---------------------------------- //
/** Reset player respawn timer.
 *
 *	@param	_Player		The player to reset.
 */
Void PUR_ResetRespawn(CTmPlayer _Player) {
	if (_Player == Null) return;
	PursuitUI::SetPlayerRespawnStartTime(_Player, -1);

	declare Boolean RequestsRespawn for _Player;
	declare Integer RespawnStartTime for _Player;
	declare Boolean ResetRespawnCounter for _Player;
	RequestsRespawn = False;
	RespawnStartTime = -1;
	ResetRespawnCounter = False;
}

// ---------------------------------- //
/** Reset player camping detection.
 *
 *	@param	_Player		The player to reset.
 */
Void PUR_ResetCamping(CTmPlayer _Player) {
	if (_Player == Null) return;
	PursuitUI::SetPlayerRespawnIsCamping(_Player, False, Vec3);

	declare Boolean DetectedCamping for _Player;
	declare Vec3 PositionUpdate for _Player;
	DetectedCamping = False;
	PositionUpdate = Vec3;
}

// ---------------------------------- //
/** Spawn a player to the race.
 *
 *	@param	_Player		A Player to spawn.
 */
Void PUR_SpawnPlayer(CTmPlayer _Player) {
	if (_Player == Null) return;
	TM::WaitRace(_Player);
	PUR_ResetRespawn(_Player);
	PUR_ResetCamping(_Player);
	Streaks::CountElimination(_Player);

	// Police special skins
	declare PlayerClan = PUR_GetPlayerClan(_Player);
	declare ModelName = "";

	// Reset AFK checking
	declare Integer IdleStartTime for _Player;
	declare Vec3 LastPosition for _Player;
	IdleStartTime = 0;
	LastPosition = Vec3;

	// ---------------------------------- //
	// Set player model
	declare PlayerCharacterId = 0;
	if (S_EnableCharSelection) PlayerCharacterId = Characters::GetPlayerChar(_Player);

	// Forced StadiumCar
	if (Characters::IsOpenplanetRequired() && !Characters::HasOpenplanet(_Player)) PlayerCharacterId = 1;

	Characters::SendPlayerCharInfo(_Player, PlayerCharacterId);
	Minimap::SetVehicleType(_Player, PlayerCharacterId + 1);

	switch (PlayerCharacterId) {
		// ---------------------------------- //
		// Canyon Car
		case 0 : {
			switch (PlayerClan) {
				case 1 : ModelName = "Canyon Interceptor.Skin.Pack.Gbx";
				default : ModelName = "";
			}
			Models::SetCanyonCar(_Player, ModelName);
			ST2::SetColValue("PUR_Vehicle", _Player.Score, "$F00C");
		}
		case 1 : {
			Models::SetStadiumCar(_Player);
			ST2::SetColValue("PUR_Vehicle", _Player.Score, "$0F7S");
		}
		case 2 : {
			Models::SetValleyCar(_Player);
			ST2::SetColValue("PUR_Vehicle", _Player.Score, "$7F0V");
		}
		case 3 : {
			Models::SetLagoonCar(_Player);
			ST2::SetColValue("PUR_Vehicle", _Player.Score, "$07FL");
		}
		default : {
			Models::SetDefault(_Player);
			ST2::SetColValue("PUR_Vehicle", _Player.Score, "");
		}
	}

	// ---------------------------------- //
	// Engine max RPM
	declare EngineMaxRPM = 10000.;
	switch (PlayerCharacterId) {
		case 0 : if (MapPlayerModelName == "StadiumCar") EngineMaxRPM = 11000.;
		case 1 : EngineMaxRPM = 11000.;
		default : EngineMaxRPM = 10000.;
	}
	PursuitUI::SetPlayerEngineMaxRPM(_Player, EngineMaxRPM);

	// Spawn the player
	declare PlayerStartTime = Now;
	if (!S_UseInstantRespawn) PlayerStartTime += C_PlayerSpawnDuration;
	TM::StartRace(_Player, PlayerStartTime);
}

// ---------------------------------- //
/** Play a sound for everyone.
 *
 *	@param	_Player		Player to play the sound (everyone if null).
 *	@param	_Sound		Name of the sound.
 *	@param	_Variant	Variant of the sound.
 */
Void PUR_PlaySound(CTmPlayer _Player, CUIConfig::EUISound _Sound, Integer _Variant) {
	declare SoundName = "";
	switch (_Sound) {
		case CUIConfig::EUISound::Default		: SoundName = "UIPhaseChange.wav";
		case CUIConfig::EUISound::EndRound		: SoundName = "UIEndRound.wav";
		case CUIConfig::EUISound::StartRound	: SoundName = "UISound_StartRound.wav";
		case CUIConfig::EUISound::VictoryPoint	: SoundName = "UISound_Victory.wav";
		case CUIConfig::EUISound::TimeOut		: SoundName = "UITimeOut.wav";
		case CUIConfig::EUISound::Notice		: SoundName = "UIPopUp_Left.wav";
		case CUIConfig::EUISound::PhaseChange	: switch (_Variant) {
			case 1 : SoundName = "UITakeTheLead.wav";
			default : SoundName = "UIPhaseChange.wav";
		}
		case CUIConfig::EUISound::TieBreakPoint	: switch (_Variant) {
			case 1 : SoundName = "UISound_Break02.wav";
			case 2 : SoundName = "UISound_Break03.wav";
			case 3 : SoundName = "UISound_Break04.wav";
			case 4 : SoundName = "UISound_Break05.wav";
			default : SoundName = "UISound_Break01.wav";

		}
		case CUIConfig::EUISound::Checkpoint	: switch (_Variant) {
			case 1 : SoundName = "UICheckPointLate.wav";
			default : SoundName = "UICheckPointAhead.wav";
		}
		case CUIConfig::EUISound::ScoreProgress	: switch (_Variant) {
			case 1 : SoundName = "UIEvent_ScoreProgress2.wav";
			case 2 : SoundName = "UIEvent_ScoreProgress3.wav";
			case 3 : SoundName = "UIEvent_ScoreProgress4.wav";
			default : SoundName = "UIEvent_ScoreProgress1.wav";
		}
	}
	if (SoundName == "") return;
	SoundName = C_ImgBase^"Sounds/"^SoundName;

	if (_Player != Null) Sound::PlaySound(SoundName, C_SoundsBaseVolume, _Player);
	else Sound::PlaySound(SoundName, C_SoundsBaseVolume);
}

Void PUR_PlaySound(CUIConfig::EUISound _Sound, Integer _Variant) {
	PUR_PlaySound(Null, _Sound, _Variant);
}

// ---------------------------------- //
/** Automatic waiting for players sequence.
 *
 *	You can extend this sequence by adding code in labels below:
 *	- Pursuit_StartWaiting
 *	- Pursuit_WaitingYield
 *	- Pursuit_WaitingLoop
 *	- Pursuit_WaitingInitPlayer
 *	- Pursuit_EndWaiting
 *
 *	@param	_MinimumNbPlayers	Minimum number of players required to start the game.
 */
Void PUR_WaitForPlayers(Integer _MinimumNbPlayers) {
	if (_MinimumNbPlayers <= 0 || !MB_MapIsRunning()) return;

	// Initialize waiting sequence
	declare PUR_UseAutomaticSequence = True;
	declare PUR_StopWaiting = False;
	declare PUR_WasPaused = CupAdmin::IsCupPaused();
	declare PUR_HasWaited = False;
	declare PUR_PrevLagoonCarUnlockMode = S_LagoonCarUnlockMode;
	declare PUR_PrevDisableCameraFree = S_DisableCameraFree;
	declare PUR_OldSequence = UIManager.UIAll.UISequence;

	// ---------------------------------- //
	// Waiting sequence loop
	while (MB_MapIsRunning()) {
		MB_Yield();

		+++GalaxyTitles_WaitingYield+++

		// Let the server sleep if there's no players on it
		if (Players.count <= 0) continue;

		// Stop waiting if there are enough players to start the game
		if (Players.count >= _MinimumNbPlayers && !CupAdmin::IsCupPaused()) PUR_StopWaiting = True;
		if (PUR_StopWaiting) break;

		// ---------------------------------- //
		// Initialize waiting sequence
		if (!PUR_HasWaited) {
			Translations::ResetMessages();
			TM::WaitRaceAll();
			Minimap::Show();

			UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
			PUR_PlaySound(CUIConfig::EUISound::PhaseChange, 0);
			PUR_HasWaited = True;
			
			if (CupAdmin::IsCupPaused()) {
				Translations::SetStatusMessage("Competition has been paused");
				UIManager.UIAll.BigMessage = TL::Compose("$F90%1", _("Pause"));
			} else {
				UIManager.UIAll.BigMessage = _("Waiting for players...");
				UIManager.UIAll.StatusMessage = "";
			}

			+++GalaxyTitles_StartWaiting+++
		}

		// ---------------------------------- //
		// Update Lagoon Car availability
		if (PUR_PrevLagoonCarUnlockMode != S_LagoonCarUnlockMode) {
			PUR_PrevLagoonCarUnlockMode = S_LagoonCarUnlockMode;
			PUR_UpdateLagoonCar(S_LagoonCarUnlockMode);
		}

		// ---------------------------------- //
		// Update camera free availability
		if (PUR_PrevDisableCameraFree != S_DisableCameraFree) {
			PUR_PrevDisableCameraFree = S_DisableCameraFree;
			PursuitUI::SetCamera7Forbidden(S_DisableCameraFree);
		}

		+++GalaxyTitles_WaitingLoop+++

		// ---------------------------------- //
		// Automatic sequence
		if (PUR_UseAutomaticSequence) {
			OffZone::Loop();
			
			// ---------------------------------- //
			// Respawn players changing characters
			foreach (PlayerId => CharacterId in Characters::CharChangeRequests()) {
				if (!Players.existskey(PlayerId)) continue;
				declare Player <=> Players[PlayerId];
				TM::WaitRace(Player);
			}

			// ---------------------------------- //
			// Manage events
			foreach (Event in PendingEvents) {
				Discard(Event);
				
				// Waypoint
				if (Event.Type == CTmModeEvent::EType::WayPoint) {
					if (Event.IsEndRace) TM::WaitRace(Event.Player);
				}

				// Respawn
				else if (Event.Type == CTmModeEvent::EType::Respawn) TM::WaitRace(Event.Player);
				
				// GiveUp
				else if (Event.Type == CTmModeEvent::EType::GiveUp) TM::WaitRace(Event.Player);
			}
			
			// Spawn players
			foreach (Player in Players) if (TM::IsWaiting(Player)) PUR_SpawnPlayer(Player);
		}
	}

	// ---------------------------------- //
	// Stop the waiting sequence
	if (!ServerShutdownRequested && !MatchEndRequested && PUR_HasWaited) {
		Translations::ResetMessages();
		TM::WaitRaceAll();
		Minimap::Hide();

		declare Message = _("A new player joins the game.");
		if (PUR_WasPaused) Message = "Competition has been resumed!";
		
		Translations::SendBigMessage(Message, 5000, 0);
		PUR_PlaySound(CUIConfig::EUISound::Default, 0);

		+++GalaxyTitles_EndWaiting+++

		MB_Sleep(5000);

		UIManager.UIAll.BigMessage = "";
		UIManager.UIAll.StatusMessage = "";
		UIManager.UIAll.UISequence = PUR_OldSequence;
	}
}