// --------------------------------------- \\
// CHECKPOINT HUNTERS MODE by Latius Auro  \\
// Script version v0.8.8 (12/04/18)        \\
// Based on Domino's Goal Hunt mode script \\
// --------------------------------------- \\

/*
In Checkpoint Hunters, all Checkpoints are valid targets from the start.
The first to capture a Checkpoint gets maximun points for the CP, and then each future capture reduces the points, until it only grants  either 1 point per capture, or nothing.
Respawning is instant, but costs 1 point to do so if you have any.

The round ends either once one player has captured all the CPs, or when time runs out.
When a round ends, a bonus multiplier can be granted based on how many CPs the player has captured, compared to the total number of CPs. Being the one to capture all CPs gives an extra bonus to it.
There is also the possability of a Special Speed Bonus. For this, a number of random CPs will be chosen. Whoever was the fastest through those CPs when capturing them gets a bonus to their modifier.

Highest combined score at the end of the match wins!
*/

#Extends "Modes/TrackMania/ModePursuit.Script.txt"

#Const CompatibleMapTypes  			"GoalHuntArena" //Uses the same arenas as GoalHunt
#Const Version              		"0.8.8"
#Const ScriptName           		"Modes/TrackMania/CPHunters.Script.txt"

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "Libs/domino54/SplitScreenLib.Script.txt" as SplitScreen
#Include "Libs/domino54/TrackMania/Checkpoints.Script.txt" as Checkpoints 


// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit				300 	as _("Base Time Limit/round(Min 60s, Max 600s) (0 = No Limit)")
#Setting S_CPBasedTimeLimit			False	as _("Should the Time Limit depend on how many CPs there are?")
#Setting S_ExtraTime				10		as _("Extra seconds for every Checkpoint after tenth (Min 1s, Max 20s)")
#Setting S_NumRounds				3		as _("How many rounds per match to play (Min 1, Max 5)")
#Setting S_MaxPointsPerCapture		12		as _("Max points for first capture of Checkpoint (Min 3)")
#Setting S_CapturePointReduction	1		as _("How many points to deduct from a Checkpoint when captured (Min 1)")
#Setting S_CapturePercentModifier	True	as _("Gives multiplier dependant on CP percentage")
#Setting S_ModifierIncrease			25		as _("Percentage increase per tier (Min 5%, Max 100%)")
#Setting S_CaptureTiers				4		as _("Tiers for multiplier bonus (Min 2, Max 5)")


// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const Description _("""Hunt to get to each Checkpoint first.

The fresher the Checkpoint, the more it's worth.

Highest Score once someone collects all Checkpoints, or when time runs out, wins.""")
#Const C_NbCheckpointsRequired		5	// Min number of Checkpoints needed to be a valid map
#Const C_RespawnPenaltyPoints		-1	// Penalty for respawning
#Const C_MinPoints					1	// Min points
#Const C_TimeLimitCap				900	// Absolute max value for the Time Limit (15 minutes)

// Min and Max values for settings:
#Const C_MinTimeLimit				60	// Min value for TimeLimit (1 minute)
#Const C_MaxTimeLimit				600	// Max value for TimeLimit (10 minutes)
#Const C_MinExtraTime 				1	// Min value for ExtraTimeLimit (+1s per CP)
#Const C_MaxExtraTime				20	// Mac value for ExtraTimeLimit (+20s per CP)
#Const C_MinRounds					1	// Min value for NumRounds
#Const C_MaxRounds					5	// Max value for NumRounds
#Const C_MinReduction				1	// Min value for CapturePointReduction
#Const C_MinMaxPointsPerCapture		3	// Min value for MaxPointsPerCapture
#Const C_MinModIncrease				5	// Min value for ModifierIncrease (5%)
#Const C_MaxModifierIncrease		100	// Max value for ModifierIncrease (100%)
#Const C_MinCaptureTiers			2	// Min value for CaptureTiers
#Const C_MaxCaptureTiers			5	// Max value for CaptureTiers

//Freshness Colours for the Checkpoints
#Const C_SuperFreshCP				<0.0, 1.0, 0.0>		//Colour for a Super Fresh (Unclaimed) CP 	[0F0] (Green)
#Const C_FreshCP					<1.0, 0.9, 0.0>		//Colour for a Fresh (50%+ points) CP 		[FE0] (Gold)
#Const C_NotFreshCP					<0.5, 0.5, 0.5>		//Colour for a Not Fresh (<50% points) CP 	[888] (Silver)
#Const C_StaleCP					<0.85, 0.5, 0.2>	//Colour for a Stale (1 point) CP 			[D83] (Bronze)

#Const C_CPColors [<0.0, 1.0, 0.0>, <1.0, 0.9, 0.0>, <0.5, 0.5, 0.5>, <0.85, 0.5, 0.2>]

// ---------------------------------- //
// Globales
// ---------------------------------- //

declare Integer[] G_CheckpointsList;		// All checkpoints which are currently in play
declare Integer[] G_CheckpointScore;		// The current number of points on offer for a Checkpoint
declare Integer[] G_CheckpointFreshness;	// How fresh a Checkpoint currently is

declare Text[] G_CreatedMapMarkers;

declare Integer StartTime;
declare Integer CurrentTimeLimit;			// The set time limit
declare Integer NumCPs;						//Total number of CPs
declare Ident CPLeaderId;		//ID of the player who has the most CPs captured

//Global variables of settings
declare Integer G_TimeLimit;
declare Integer G_ExtraTime;
declare Integer G_CarUnlock;
declare Integer G_UnlockPeriod;
declare Integer G_NumRounds;
declare Integer G_MaxPointsPerCapture;
declare Integer G_CapturePointReduction;
declare Integer G_ModifierIncrease;
declare Integer G_CaptureTiers;


// ---------------------------------- //
// Extends
// ---------------------------------- //
***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
Log::RegisterScript(Checkpoints::GetScriptName(), Checkpoints::GetScriptVersion());
Log::RegisterScript(SplitScreen::GetScriptName(), SplitScreen::GetScriptVersion());
***

// ---------------------------------- //
// Rules
// ---------------------------------- //
***Match_Rules***
***
ModeInfo::SetName("CheckPoint Hunters");
ModeInfo::SetType(ModeInfo::Type_FreeForAll());
ModeInfo::SetRules(Description);
ModeInfo::SetStatusMessage(_("Touch a Checkpoint to claim the current points it would give. The round ends once someone claims all Checkpoints."));
***


***Match_StartServer***
***
//Make sure the settings fit the requirements, and if not, correct them.
SettingCorrection();

// ---------------------------------- //
// Create custom interface
Layers::Create("CPHuntersTM:Markers", CreateManialinkMarkers());
Layers::SetType("CPHuntersTM:Markers", CUILayer::EUILayerType::Markers);
Layers::Create("CPHuntersTM:PointsCount", CreateManialinkPointsCount());

PursuitUI::SetSafeTimeDuration(0);
UpdateInterface();
***

// ---------------------------------- //
// Scores table
// ---------------------------------- //
***ScoresTable***
***
ST2::SetColWidth("LibST_Name", 20.);
TopScores::AddCategory("CPHuntersTM:Capture", "Most captures", "ï„²", 2.);
TopScores::AddCategory("CPHuntersTM:Stunts", "Most stunts", "ðŸ”¥", 3.);
TopScores::SetFormat(2, 1);
***



***Match_InitMap***
***
///Code to execute when a map is initialized
declare Integer PrevTimeLimit;	//Previous Time Limit
declare Integer MaxPoints;		//Current high score in the round
declare Integer MaxCPs;			//Current CPs captured by the player who captured the most CPs
declare Ident PointsLeaderId;	//ID of the player with the most points



//Load Checkpoints
Checkpoints::LoadMap();
NumCPs = Checkpoints::NbCheckpoints();

//Check if the map is valid
declare MapValidated = True;
declare MapType = "";
foreach (I in TL::Split("\\", Map.MapType)) MapType = I;

if (MapType != CompatibleMapTypes) MapValidated = False; //If it's not a CPHuntersArena, it can't be used
if (NumCPs < C_NbCheckpointsRequired) MapValidated = False; //If there's less than 5 Checkpoints, it can't be used

//Skip invalid maps
if (!MapValidated) {
	declare Msg = "This map is invalid; moving to the next one.";
	Translations::SendChat(Msg);
	Chat::SendMessage(Msg);

	if (!ServerShutdownRequested) MB_Sleep(10000);
	MB_StopMap();
}
***

***Match_StartMap***
***
//Code to execute when a map is starting

//Reset arrays
G_CheckpointsList.clear();
G_CheckpointScore.clear();
G_CheckpointFreshness.clear();

SettingCorrection();

//Make sure the Time Limit is set correctly
G_TimeLimit = S_TimeLimit;
if (G_TimeLimit < 0) G_TimeLimit = 0; //Anything less than 0 is considered to be 0 (And thus infinite)
if (G_TimeLimit > C_MaxTimeLimit) G_TimeLimit = C_MaxTimeLimit; //If the time limit is above the max, cap it.
if (G_TimeLimit < C_MinTimeLimit && G_TimeLimit != 0) G_TimeLimit = C_MinTimeLimit; //If the time limit is below the min, but not 0, cap it
	
if (!S_CPBasedTimeLimit) {
	//Fixed time limit
	CurrentTimeLimit = G_TimeLimit;
} else {
	//Variable time limit
	if (Checkpoints::NbCheckpoints() >= C_NbCheckpointsRequired * 2) CurrentTimeLimit = G_TimeLimit + ((Checkpoints::NbCheckpoints() - (2 * C_NbCheckpointsRequired)) * G_ExtraTime);
	if (CurrentTimeLimit > C_TimeLimitCap) CurrentTimeLimit = C_TimeLimitCap;
}

PrevTimeLimit = CurrentTimeLimit;
MaxPoints = 0;
MaxCPs = 0;
PointsLeaderId = NullId;
CPLeaderId = PointsLeaderId;

// ---------------------------------- //
// Wait for enough players to start game
while (!ServerShutdownRequested && !MatchEndRequested && Players.count <= 0) MB_Yield();

// Vehicle selection
PUR_ShowCharSelection();

// Scores
if (Scores.existskey(0)) PointsLeaderId = Scores[0].User.Id;

// Init players
foreach (Player in Players) {
	declare Integer[] CapturedCheckpointsIds for Player;
	declare Integer NumCapturedCheckpoints for Player;
	CapturedCheckpointsIds.clear();
	NumCapturedCheckpoints = 0;
}

// ---------------------------------- //
// Initialize race
StartTime = Now + C_PlayerSpawnDuration;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
PursuitUI::SetStartTime(StartTime);

if (CurrentTimeLimit > 0) PUR_SetTimeLimit(StartTime + CurrentTimeLimit * 1000);
else PUR_DisableTimeLimit();

PUR_PlaySound(CUIConfig::EUISound::StartRound, 0);
Replay_Start();

// Get the goals set up
PrepGoals();

// Attach the interface
Layers::Attach("CPHuntersTM:Markers");
Layers::Attach("CPHuntersTM:PointsCount");
***

***Match_Playloop***
***
//Main loop where the code is executed through the duration of the round/map
// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	Discard(Event);

	// ---------------------------------- //
	// Waypoint
	if (Event.Type == CTmModeEvent::EType::WayPoint) {
		if (Event.IsEndRace) TM::WaitRace(Event.Player);
	}
	// ---------------------------------- //
	// Respawn
	else if (Event.Type == CTmModeEvent::EType::GiveUp || Event.Type == CTmModeEvent::EType::Respawn) {
		TM::WaitRace(Event.Player);
		PUR_AddPoints(Event.Player, C_RespawnPenaltyPoints);
	}
	// ---------------------------------- //
	// On stunt
	if (Event.Type == CTmModeEvent::EType::Stunt) {
		TopScores::AddPoints(Event.Player.Score, "CPHuntersTM:Stunts", Event.Points);
	}
}

// ---------------------------------- //
// Active triggers
foreach (Player in Players) {
	if (!Player.IsSpawned) continue;

	foreach (I => CheckpointId in G_CheckpointsList) {
		if (!Checkpoints::IsInTrigger(Player, CheckpointId)) continue;

		MaxCPs = CaptureCheckpoint(Player, CheckpointId, MaxCPs);
	}
}

// ---------------------------------- //
// Respawn players changing vehicles
foreach (PlayerId => CharacterId in Characters::CharChangeRequests()) {
	if (!Players.existskey(PlayerId)) continue;
	declare Player <=> Players[PlayerId];
	
	TM::WaitRace(Player);
	PUR_AddPoints(Player, C_RespawnPenaltyPoints);
}

// ---------------------------------- //
// Manage players functions
foreach (Player in Players) {
	// Respawn falling into OffZone
	if (OffZone::IsInOffZone(Player) || OffZone::IsBeyondMapEdge(Player) || OffZone::IsBelowMapBottom(Player) || OffZone::IsBelowWaterLevel(Player)) {
		PUR_AddPoints(Player, C_RespawnPenaltyPoints);
		TM::WaitRace(Player);
	}

	// Spawn players awaiting race
	if (TM::IsWaiting(Player)) PUR_SpawnPlayer(Player);
}


// ---------------------------------- //
// Play sound and notice if someone is taking the lead
if (Scores.existskey(0) && Scores[0].User.Id != PointsLeaderId) {
	if (MaxPoints == 0) //First CP captured
	{
		Message::SendBigMessage(TL::Compose(_("$<%1$> captures the first Checkpoint!"), Scores[0].User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
	} else {
		//New Leader
		Message::SendBigMessage(TL::Compose(_("$<%1$> takes the lead from $<%2$>!"), Scores[0].User.Name, Scores[PointsLeaderId].User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
	}
	PUR_PlaySound(CUIConfig::EUISound::PhaseChange, 1);
	PointsLeaderId = Scores[0].User.Id;
	MaxPoints = Scores[0].Points;
}

// Update time limit if fixed time limit
if (PrevTimeLimit != S_TimeLimit && !S_CPBasedTimeLimit) {
	G_TimeLimit = S_TimeLimit;
	if (G_TimeLimit < 0) G_TimeLimit = 0; //Anything less than 0 is considered to be 0
	if (G_TimeLimit > C_MaxTimeLimit) G_TimeLimit = C_MaxTimeLimit; //If the time limit is above the max, cap it.
	if (G_TimeLimit < C_MinTimeLimit && G_TimeLimit != 0) G_TimeLimit = C_MinTimeLimit; //If the time limit is below the min, but not 0, cap it
	CurrentTimeLimit = G_TimeLimit;

	PrevTimeLimit = CurrentTimeLimit;
	if (CurrentTimeLimit > 0) PUR_SetTimeLimit(StartTime + CurrentTimeLimit * 1000);
	else PUR_DisableTimeLimit();
}

//End of round triggers

//Trigger #1: One player capturing all CPS
if (MaxCPs == NumCPs){
	//Announce it
	Message::SendBigMessage(TL::Compose(_("$<%1$> has captured all Checkpoints!"), Scores[CPLeaderId].User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
	PUR_PlaySound(CUIConfig::EUISound::VictoryPoint, 0);

	//End the round
	PUR_DisableTimeLimit();
	MB_StopRound();
}

//Trigger #2: Time Over
if (PUR_TimeReachedLimit()) {
	Message::SendBigMessage(TL::Compose(_("Time has run out!")), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
	
	//End the round
	PUR_DisableTimeLimit();
	MB_StopRound();
}
***

***Match_EndRound***
***
//Code to trigger at the end of a round
PursuitUI::SetStartTime(-1);
TopScores::RoundEnd();
TM::WaitRaceAll();
Replay_Stop();

MB_Sleep(1000);

//Determine bonus points
foreach (Player in Players) {
	declare Integer scoremod = 0; //+0% Modifier

	//Check how many CPs the player has captured compared to the total number of CPs and the Capture Tiers
	if (S_CapturePercentModifier) {
		declare Integer NumCapturedCheckpoints for Player;
		declare Integer CaptureTierMod = ((NumCapturedCheckpoints * G_CaptureTiers) / NumCPs); //This gives a Real value between 0 and S_CaptureTiers
		scoremod += (CaptureTierMod * G_ModifierIncrease);
		if (CaptureTierMod == G_CaptureTiers) scoremod += G_ModifierIncrease; //100% capture rate increases the bonus modifier by another tier.
	}

	//Get the round score, and times it by scoremod, rounding if needed, before adding it to the score of the player
	declare Integer BonusScore;
	BonusScore = ((Player.Score.Points * scoremod)/100);
	PUR_AddPoints(Player, BonusScore);
}

UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
Message::CleanAllMessages();
PUR_PlaySound(CUIConfig::EUISound::EndRound, 0);

// Stop map after reaching rounds limit
if (MB_GetRoundCount() >= G_NumRounds) MB_StopMap();
***

***Match_EndMap***
***
//Code to execute at the end of a match/map

// Detach the interface
Layers::Detach("CPHuntersTM:Markers");

UIManager.UIAll.CountdownEndTime = -1;
PursuitUI::SetStartTime(-1);
TopScores::RoundEnd();
TM::WaitRaceAll();
Replay_Stop();

MB_Sleep(3000);

UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
Message::CleanAllMessages();
PUR_PlaySound(CUIConfig::EUISound::EndRound, 0);
Layers::Detach("CPHuntersTM:PointsCount");
***

// ---------------------------------- //
// Server end
// ---------------------------------- //
***EndServer***
***
Layers::Destroy("CPHuntersTM:Markers");
Layers::Destroy("CPHuntersTM:PointsCount");
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Get the Freshness of a checkpoint
 *
 *	@param	_CheckpointId		Id of the checkpoint to get the freshness
 *
 *	@return		The checkpoint freshness as an integer
 */
Integer GetGoalFreshness(Integer _CheckpointId) {
	if (!G_CheckpointsList.exists(_CheckpointId)) return -1;
	if (!G_CheckpointFreshness.exists(_CheckpointId)) return -1;
	return G_CheckpointFreshness[_CheckpointId];
}

// ---------------------------------- //
/** Get the score of a checkpoint
 *
 *	@param	_CheckpointId		Id of the checkpoint to get the score
 *
 *	@return		The checkpoint score
 */
Integer GetGoalPoints(Integer _CheckpointId) {
	if (!G_CheckpointsList.exists(_CheckpointId)) return -1;
	if (!G_CheckpointScore.exists(_CheckpointId)) return -1;
	return G_CheckpointScore[_CheckpointId];
}

// ---------------------------------- //
/// Update the data sent to the interface
Void UpdateInterface() {
	declare netwrite Integer Net_CPHuntersTM_NbMaxGoals for Teams[0];
	declare netwrite Integer Net_CPHuntersTM_UpdateTime for Teams[0];
	declare netwrite Vec3 Net_CPHuntersTM_CurrentGoal for Teams[0];
	declare netwrite Vec3[] Net_CPHuntersTM_CheckpointsList for Teams[0];
	declare netwrite Integer[] Net_CPHuntersTM_CheckpointScore for Teams[0];
	declare netwrite Integer[] Net_CPHuntersTM_CheckpointFreshness for Teams[0];
	declare netwrite Vec3[][Text] Net_CPHuntersTM_CapturedGoals for Teams[0];
	
	Net_CPHuntersTM_NbMaxGoals = NumCPs;
	Net_CPHuntersTM_UpdateTime = Now;
	Net_CPHuntersTM_CheckpointsList.clear();
	Net_CPHuntersTM_CheckpointScore.clear();
	Net_CPHuntersTM_CheckpointFreshness.clear();
	Net_CPHuntersTM_CapturedGoals.clear();
	
	// ---------------------------------- //
	// Get the list of all capturable Goals
	foreach (CheckpointId in G_CheckpointsList) {
		// Get landmark position
		declare Position = Checkpoints::GetPosition(CheckpointId);
		Net_CPHuntersTM_CheckpointsList.add(Position);

		// Get score and freshness
		declare CPFreshness = G_CheckpointFreshness[CheckpointId];
		declare CPScore = G_CheckpointScore[CheckpointId];
		Net_CPHuntersTM_CheckpointScore.add(CPScore);
		Net_CPHuntersTM_CheckpointFreshness.add(CPFreshness);
	}
	
	// ---------------------------------- //
	// Get list of Goals captured by players
	foreach (Player in Players) {
		declare Integer[] CapturedCheckpointsIds for Player;
		Net_CPHuntersTM_CapturedGoals[Player.User.Login] = Vec3[];
		
		foreach (CheckpointId in CapturedCheckpointsIds) {
			declare Position = Checkpoints::GetPosition(CheckpointId);
			Net_CPHuntersTM_CapturedGoals[Player.User.Login].add(Position);
		}
	}
	
	// ---------------------------------- //
	// Update minimap markers
	foreach (Marker in G_CreatedMapMarkers) Minimap::DestroyMarker(Marker);
	G_CreatedMapMarkers.clear();
	
	foreach (CheckpointId in G_CheckpointsList) {
		declare GoalFreshness = GetGoalFreshness(CheckpointId);
		
		// If a valid Freshness value
		if (GoalFreshness != -1) {
			// Configure marker apperance
			declare MarkerId = CheckpointId^" Goal";
			declare Color = <1., 1., 1.>;
			if (C_CPColors.existskey(GoalFreshness)) Color = C_CPColors[GoalFreshness];
		
			// Create marker
			declare Position = Checkpoints::GetPosition(CheckpointId);
			Minimap::SetMarker(MarkerId, "Goal.png", Color, Position);
			G_CreatedMapMarkers.add(MarkerId);
		}
	}
}

// ---------------------------------- //
/** Capture a checkpoint by a player
 *
 *	@param	_Player			The player that captures a checkpoint
 *	@param	_CheckpointId	Id of the checkpoint to capture
 *	@param	_MaxCPs			The current Max CPs
 *
 * @return  The new MaxCP
 */
Integer CaptureCheckpoint(CTmPlayer _Player, Integer _CheckpointId, Integer _MaxCPs) {
	if (_Player == Null || _CheckpointId == -1) return _MaxCPs;
	
	// Check if player haven't captured this goal yet
	declare Integer[] CapturedCheckpointsIds for _Player;
	if (CapturedCheckpointsIds.exists(_CheckpointId)) return _MaxCPs;
	CapturedCheckpointsIds.add(_CheckpointId);


	declare GoalPoints = G_CheckpointScore[_CheckpointId];
	declare GoalFreshness = G_CheckpointFreshness[_CheckpointId];
	if (GoalFreshness == -1) return _MaxCPs;
	declare Text GoalFreshnessText;

	switch (GoalFreshness) {
		case 0 : GoalFreshnessText = "Super Fresh";
		case 1 : GoalFreshnessText = "Fresh";
		case 2 : GoalFreshnessText = "Not Fresh";
		case 3 : GoalFreshnessText = "Stale";
		default : GoalFreshnessText = "Unknown";
	}

	PUR_AddPoints(_Player, GoalPoints);
	TopScores::AddPoints(_Player.Score, "CPHuntersTM:Capture", GoalPoints);
	
	//Notify player about the capture
	Translations::SendStatusMessage(_Player, "You've captured a "^GoalFreshnessText^" Checkpoint!", 3000, 1);
	PUR_PlaySound(_Player, CUIConfig::EUISound::Checkpoint, 0);

	declare Integer NumCapturedCheckpoints for _Player;
	NumCapturedCheckpoints += 1;
	declare Integer NewMaxCPs;
	NewMaxCPs = _MaxCPs;
	if (NumCapturedCheckpoints > _MaxCPs) {
		NewMaxCPs = NumCapturedCheckpoints;

		if (NewMaxCPs == (NumCPs - 1)){
			//If the player has just got one CP left, announce it
			Message::SendBigMessage(TL::Compose(_("$<%1$> has only 1 Checkpoint left to capture!"), _Player.User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
		}
		else if (CPLeaderId != _Player.User.Id && !(NewMaxCPs == NumCPs) && !(NewMaxCPs == 1)){
			Message::SendBigMessage(TL::Compose(_("$<%1$> is now leading in terms of number of Checkpoints captured!"), _Player.User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
		}
		
		CPLeaderId = _Player.User.Id;
	}
	else if (NumCapturedCheckpoints == (NumCPs - 1)){
		//If the player has just got one CP left, announce it
		Message::SendBigMessage(TL::Compose(_("$<%1$> also has only 1 Checkpoint left to capture!"), _Player.User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
	}

	// Update Checkpoint status
	if (GoalFreshness != 3){ //Only do if the CP isn't Stale
		GoalPoints -= G_CapturePointReduction;
		if (GoalPoints <= C_MinPoints) {
			GoalPoints = C_MinPoints;
			GoalFreshness = 3;
		}
		else if (GoalPoints < (G_MaxPointsPerCapture / 2)) {
			GoalFreshness = 2;
		}
		else GoalFreshness = 1;

		G_CheckpointFreshness[_CheckpointId] = GoalFreshness;
		G_CheckpointScore[_CheckpointId] = GoalPoints;
	}

	UpdateInterface();
	
	return NewMaxCPs;
}

// ---------------------------------------- //
/** Set up the Checkpoints for a new round
 */
Void PrepGoals() {

	G_CheckpointsList = Checkpoints::List();
	foreach (CheckP in G_CheckpointsList){
		G_CheckpointScore.add(G_MaxPointsPerCapture);
		G_CheckpointFreshness.add(0);
	}
	
	// Update interfaces
	UpdateInterface();
	Minimap::Flash();
}


Void SettingCorrection() {
	//Only correct the CP based Time Limit settings if active
	if (S_CPBasedTimeLimit) {
		if (S_TimeLimit < C_MinTimeLimit) G_TimeLimit = C_MinTimeLimit;
		else if (S_TimeLimit > C_MaxTimeLimit) G_TimeLimit = C_MaxTimeLimit;
		else G_TimeLimit = S_TimeLimit;

		if (S_ExtraTime < C_MinExtraTime) G_ExtraTime = C_MinExtraTime;
		else if (S_ExtraTime > C_MaxExtraTime) G_ExtraTime = C_MaxExtraTime;
		else G_ExtraTime = S_ExtraTime;
	}

	if (S_NumRounds < C_MinRounds) G_NumRounds = C_MinRounds;
	else if (S_NumRounds > C_MaxRounds) G_NumRounds = C_MaxRounds;
	else G_NumRounds = S_NumRounds;

	if (S_MaxPointsPerCapture < C_MinMaxPointsPerCapture) G_MaxPointsPerCapture = C_MinMaxPointsPerCapture;
	else G_MaxPointsPerCapture = S_MaxPointsPerCapture;

	if (S_CapturePointReduction < C_MinReduction) G_CapturePointReduction = C_MinReduction;
	else G_CapturePointReduction = S_CapturePointReduction;

	//Only do these if Capture Percent Modifier is active
	if (S_CapturePercentModifier) {
		if (S_ModifierIncrease < C_MinModIncrease) G_ModifierIncrease = C_MinModIncrease;
		else if (S_ModifierIncrease > C_MaxModifierIncrease) G_ModifierIncrease = C_MaxModifierIncrease;
		else G_ModifierIncrease = S_ModifierIncrease;

		if (S_CaptureTiers < C_MinCaptureTiers) G_CaptureTiers = C_MinCaptureTiers;
		else if (S_CaptureTiers > C_MaxCaptureTiers) G_CaptureTiers = C_MaxCaptureTiers;
		else G_CaptureTiers = S_CaptureTiers;
	}
}

// ---------------------------------- //
/** Create manialink for the markers module
 *
 *	@return		The markers manialink
 */
Text CreateManialinkMarkers() {
	declare R = 9/16.;
	
	declare Text MarkersInstances;
	for (I, 0, NumCPs)
		MarkersInstances ^= "<frameinstance modelid='FrameModel_GoalMarker' id='Frame_GoalMarker#"^I^"' hidden='1' />";
	
	return """
<manialink version="3" name="CPHuntersTM:Markers">
<stylesheet>
	<style class="text" halign="center" valign="center2" textsize="0" textemboss="1" textcolor="FFF" textfont="Eurostile_Bold" />
</stylesheet>

<framemodel id="FrameModel_GoalMarker">
	<label pos="0 4" class="text" id="Label_MarkerDistance" />
	<label pos="0 2" class="text" scale="1.5" id="Label_MarkerGoalName" />
	<label class="text" id="Label_MarkerNbPoints" />
	<quad pos="0 3" size="{{{8*R}}} 8" halign="center" autoscale="0" image="file://Media/Manialinks/ShootMania/Common/target.dds" id="Quad_MarkerIcon" />
</framemodel>

{{{MarkersInstances}}}

<script><!--
/**
 *	CPHuntersTM: Markers
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_CPColors {{{C_CPColors}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare CMlFrame[] Frame_GoalsMarkers;
for (I, 0, {{{NumCPs}}}) Frame_GoalsMarkers.add((Page.GetFirstChild("Frame_GoalMarker#"^I) as CMlFrame));

declare CMlLabel[] Label_MarkersDistances;
foreach (Frame in Frame_GoalsMarkers) Label_MarkersDistances.add((Frame.GetFirstChild("Label_MarkerDistance") as CMlLabel));

// ---------------------------------- //
// Persistent settings
declare persistent Persistent_CPHuntersTM_GoalsOnScreen for LocalUser = False;

// ---------------------------------- //
// Netcode
declare netread Integer Net_CPHuntersTM_UpdateTime for Teams[0];
declare netread Vec3[] Net_CPHuntersTM_CheckpointsList for Teams[0];
declare netread Integer[] Net_CPHuntersTM_CheckpointScore for Teams[0];
declare netread Integer[] Net_CPHuntersTM_CheckpointFreshness for Teams[0];
declare netread Vec3[][Text] Net_CPHuntersTM_CapturedGoals for Teams[0];

// ---------------------------------- //
// Variables
declare UpdateMarkers = 2;
declare VisibleFrames = Integer[];

declare PrevUpdateTime = -1;
declare PrevGUIPlayerId = NullId;
declare PrevGoalsOnScreen = False;

// Reset markers
ClientUI.MarkersXML = "";
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Server script called an update
if (PrevUpdateTime != Net_CPHuntersTM_UpdateTime) {
	PrevUpdateTime = Net_CPHuntersTM_UpdateTime;
	UpdateMarkers = 2;
}

// ---------------------------------- //
// Force update on spectated player change
if (GUIPlayer != Null) {
	if (PrevGUIPlayerId != GUIPlayer.Id) {
		PrevGUIPlayerId = GUIPlayer.Id;
		UpdateMarkers = 2;
	}
}
else if (PrevGUIPlayerId != NullId) {
	PrevGUIPlayerId = NullId;
	UpdateMarkers = 2;
}

// ---------------------------------- //
// Goals visiblity change
if (PrevGoalsOnScreen != Persistent_CPHuntersTM_GoalsOnScreen) {
	PrevGoalsOnScreen = Persistent_CPHuntersTM_GoalsOnScreen;
	UpdateMarkers = 2;
}

// ---------------------------------- //
// Update markers
if (UpdateMarkers > 0) {
	UpdateMarkers -= 1;
	
	// Reset markers
	ClientUI.MarkersXML = "";
	
	declare Text Login;
	if (GUIPlayer != Null && GUIPlayer.User != Null) Login = GUIPlayer.User.Login;

	// Visibility
	declare Visibility = "Always";
	if (Persistent_CPHuntersTM_GoalsOnScreen) Visibility = "WhenInFrustum";
	
	// ---------------------------------- //
	// Create marker for every Goal available
	foreach (I => Frame in Frame_GoalsMarkers) {
		Frame.Visible = Net_CPHuntersTM_CheckpointsList.existskey(I);
		if (!Frame.Visible) continue;
		
		// Goal parameters
		declare Position = Net_CPHuntersTM_CheckpointsList[I];
		declare GoalFreshness = Net_CPHuntersTM_CheckpointFreshness[I];
		declare Points = Net_CPHuntersTM_CheckpointScore[I];
		
		// ---------------------------------- //
		// Ignore goal if captured by the spectated player, or invalid
		declare Vec3[] GUIPlayerGoals;
		if (Net_CPHuntersTM_CapturedGoals.existskey(Login)) GUIPlayerGoals = Net_CPHuntersTM_CapturedGoals[Login];
		if (GUIPlayerGoals.exists(Position)) { Frame.Hide(); continue; }
		if (GoalFreshness == -1) { Frame.Hide(); continue; }
		
		// ---------------------------------- //
		// Get marker height depending on the Goal type
		declare MarkerHeight = 12.;
		declare MapLandmarkTag = "Checkpoint";

		// ---------------------------------- //
		// Create marker
		declare Pos = Position.X^" "^Position.Y + MarkerHeight^" "^Position.Z;
		ClientUI.MarkersXML ^= "<marker manialinkframeid='Frame_GoalMarker#"^I^"' pos='"^Pos^"' minimapvisibility='Never' visibility='"^Visibility^"' />";
		
		// ---------------------------------- //
		// Load frame elements
		declare Label_MarkerGoalName <=> (Frame.GetFirstChild("Label_MarkerGoalName") as CMlLabel);
		declare Label_MarkerNbPoints <=> (Frame.GetFirstChild("Label_MarkerNbPoints") as CMlLabel);
		declare Quad_MarkerIcon <=> (Frame.GetFirstChild("Quad_MarkerIcon") as CMlQuad);
		
		// ---------------------------------- //
		// Configure marker text
		switch (GoalFreshness) {
			case 0 : Label_MarkerGoalName.Value = MarkerText("$n$t%1 %2", _("Super Fresh"), _("Checkpoint"));
			case 1 : Label_MarkerGoalName.Value = MarkerText("$n$t%1 %2", _("Fresh"), _("Checkpoint"));
			case 2 : Label_MarkerGoalName.Value = MarkerText("$n$t%1 %2", _("Not Fresh"), _("Checkpoint"));
			case 3 : Label_MarkerGoalName.Value = MarkerText("$n$t%1 %2", _("Stale"), _("Checkpoint"));
			default : Label_MarkerGoalName.Value = MarkerText("$n$t%1 %2", _("Unknown"), _("Checkpoint"));
		}

		
		Label_MarkerNbPoints.Value = MarkerText("$n$t%1 - %2", _("Points"), TL::ToText(Points));
		
		// ---------------------------------- //
		// Set the marker color
		declare Color = <.75, .75, .75>;
		if (C_CPColors.existskey(GoalFreshness)) Color = C_CPColors[GoalFreshness];

		Label_MarkerGoalName.TextColor = Brightness(Color, 2.);
		Quad_MarkerIcon.Colorize = Color;
		
		// Configure distance label
		Label_MarkersDistances[I].DataAttributeSet("Position", Position.X^" "^Position.Y^" "^Position.Z);
	}
}

// ---------------------------------- //
// Show the distance to a Goal
foreach (Label in Label_MarkersDistances) {
	Label.Visible = GUIPlayer != Null && GUIPlayer.Position != <0., 0., 0.>;
	if (!Label.Visible) continue;
	
	// ---------------------------------- //
	// Get the Goal position
	declare Vec3 MapLandmarkPosition;
	declare PositionText = TL::Split(" ", Label.DataAttributeGet("Position"));
	foreach (I => SubText in PositionText) MapLandmarkPosition[I] = TL::ToReal(SubText);
	
	// Set the distance text
	declare Distance = ML::Distance(GUIPlayer.Position, MapLandmarkPosition);
	Label.Value = "$n"^ML::FloorInteger(Distance)^" M";
}
***

{{{ManialinkTools::Functions(["Brightness"])}}}

// ---------------------------------- //
/** Simplified marker text creation
 *
 *	@param	_Attrib0	Marker text base
 *	@param	_Attrib1	First attribute
 *	@param	_Attrib2	Second attribute
 *
 *	@return		Marker text
 */
Text MarkerText(Text _Attrib0, Text _Attrib1, Text _Attrib2) {
	return TL::GetTranslatedText(TL::Compose(_Attrib0, _Attrib1, _Attrib2));
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the thieves counter module.
 *
 *	@return		The thieves counter manialink.
 */
Text CreateManialinkPointsCount() {
	return """
<manialink version="3" name="CPHuntersTM:PointsCount">
<stylesheet>
	<style class="Font" halign="center" valign="center2" textemboss="1" textcolor="FFF" textfont="RajdhaniMono" />
</stylesheet>

<framemodel id="FrameModel_PointsCount">
	<label pos="0 5" class="Font" textsize="7" id="Label_NbPoints" opacity="0" />
	<label size="32 3" class="Font" textsize="1.5" id="Label_Subtitle" opacity="0" />
</framemodel>

<frameinstance modelid="FrameModel_PointsCount" id="Frame_PointsCount#0" />
<frameinstance modelid="FrameModel_PointsCount" id="Frame_PointsCount#1" />
<frameinstance modelid="FrameModel_PointsCount" id="Frame_PointsCount#2" />
<frameinstance modelid="FrameModel_PointsCount" id="Frame_PointsCount#3" />

<script><!--
/**
 *	CPHuntersTM: PointsCount
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_AnimDuration 500

{{{Translations::InsertToManialink(["Thieves left"])}}}
{{{SplitScreen::Framework()}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare CMlFrame[] Frame_PointsCount;
	for (I, 0, 3) Frame_PointsCount.add((Page.GetFirstChild("Frame_PointsCount#"^I) as CMlFrame));
	
	// ---------------------------------- //
	// Configure frames
	foreach (I => Frame in Frame_PointsCount) {
		Frame.Visible = I == 0 || I < SplitScreen_NbPlayers();
		Frame.RelativePosition_V3 = SplitScreen_GetPosition(<0., -88.>, I, False);
		Frame.RelativeScale = SplitScreen_GetScale(1.);

		declare Label_NbPoints for Frame <=> (Frame.GetFirstChild("Label_NbPoints") as CMlLabel);
		declare Label_Subtitle for Frame <=> (Frame.GetFirstChild("Label_Subtitle") as CMlLabel);

		// Translations
		Label_Subtitle.SetText(TL::ToUpperCase(_("Points")));
	}

	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		foreach (I => Frame in Frame_PointsCount) {
			if (!Frame.Visible) continue;

			declare Player <=> SplitScreen_GetTmPlayer(I);

			declare NbPoints = -1;
			declare PrevNbPoints for Frame = -1;

			if (Player != Null && Player.IsSpawned && !IsSpectatorClient) NbPoints = Player.Score.Points;

			// ---------------------------------- //
			// Update amount label
			if (PrevNbPoints != NbPoints) {
				declare CMlLabel Label_NbPoints for Frame;
				declare CMlLabel Label_Subtitle for Frame;

				if (NbPoints >= 0) Label_NbPoints.SetText(TL::ToText(NbPoints));
				
				declare CAnimManager::EAnimManagerEasing Easing;
				
				// ---------------------------------- //
				// Thieves amount has changed
				if (NbPoints >= 0 && PrevNbPoints >= 0) {
					Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 0, 0.);

					declare Color = "F00";
					if (NbPoints > PrevNbPoints) Color = "0F0";
					
					Label_NbPoints.Opacity = 1.;
					Label_Subtitle.Opacity = 1.;
					
					AnimMgr.Add(Label_NbPoints, "<label scale='1.25' textcolor='"^Color^"' />", C_AnimDuration/2, CAnimManager::EAnimManagerEasing::SineOut);
					AnimMgr.AddChain(Label_NbPoints, "<label scale='1' textcolor='FFF' />", C_AnimDuration/2, CAnimManager::EAnimManagerEasing::SineIn);
				}
				// ---------------------------------- //
				// Show counter
				else if (NbPoints >= 0 && PrevNbPoints < 0) {
					Easing = CAnimManager::EAnimManagerEasing::CircOut;

					Frame.RelativeScale = SplitScreen_GetScale(2.);
					Label_NbPoints.Opacity = 0.;
					Label_NbPoints.TextColor = <1., 1., 1.>;
					Label_Subtitle.Opacity = 0.;
					
					AnimMgr.Add(Frame, "<frame scale='"^SplitScreen_GetScale(1.)^"' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_NbPoints, "<label opacity='1' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_Subtitle, "<label opacity='1' />", C_AnimDuration, Easing);
				}
				// ---------------------------------- //
				// Hide counter
				else if (NbPoints < 0 && PrevNbPoints >= 0) {
					Easing = CAnimManager::EAnimManagerEasing::CircIn;

					Frame.RelativeScale = SplitScreen_GetScale(1.);
					Label_NbPoints.Opacity = 1.;
					Label_NbPoints.TextColor = <1., 1., 1.>;
					Label_Subtitle.Opacity = 1.;
					
					AnimMgr.Add(Frame, "<frame scale='"^SplitScreen_GetScale(.5)^"' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_NbPoints, "<label opacity='0' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_Subtitle, "<label opacity='0' />", C_AnimDuration, Easing);
				}
				
				PrevNbPoints = NbPoints;
			}
		}
	}
}
--></script>
</manialink>""";
}
