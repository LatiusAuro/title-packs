// -------------------------------------- //
//  LIBRARY MANIALINK TOOLS by domino54   //
//  script version: 2018-04-21            //
// -------------------------------------- //

/**
 *	You can use this library to inject various additional
 *	functions in your manialinks, like corrected gauges ratio
 *	setting, color brightness and pulse animation.
 *
 *	Available functions:
 *	-	Pulse				Creates simple pulse animations from given time and frequency.
 *	-	SetGaugeRatio		Correctly sets the ratio of the given gauge bar.
 *	-	ComputeWidth		Compute the width of a label faster.
 *	-	Brightness			Used to adjust brightness of a given color.
 *	-	ReplaceChars		Replaces diacritic characters with characters they are based on.
 *	-	ColorTransition		Creates smooth transition between 2 or more colors according to a given ratio.
 *	-	HsvToRgb			Converts color in HSV format to RGB.
 *	-	TimeToText			Converts time Integer into formatted Text.
 *	-	GetEchelonImage		Returns path to an image of Echelon badle of specified level.
 *	-	SetQuadStyle		Sets the style of a quad - either ingame style or image URL.
 *	-	RadToDeg			Convert angle in radians to degrees.
 *	-	RotatePoint			Rotate a point around the origin.

 */

#Const Version		"2018-04-21"
#Const ScriptName	"Libs/domino54/ManialinkTools.Script.txt"

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ManialinkTools_AvailableFunctions [
	"Pulse", "SetGaugeRatio", "ComputeWidth", "Brightness",
	"ReplaceChars", "ColorTransition", "HsvToRgb", "GetEchelonImage",
	"SetQuadStyle", "RadToDeg", "RotatePoint"
]

/// Code of the Pulse() function
#Const C_ManialinkTools_Pulse """
// ---------------------------------- //
/** Return pulse value for animations
 *
 *	@param	_Time		Time of the pulse animations
 *	@param	_Frequency	Frequency of the pulse in Hz
 *
 *	@return		Pulse animation value
 */
Real Pulse(Integer _Time, Real _Frequency) {
	return (ML::Sin(ML::PI() * 2 * (_Time / 1000.) * _Frequency) + 1) / 2;
}
"""

/// Code of the SetGaugeRatio() function
#Const C_ManialinkTools_SetGaugeRatio """
// ---------------------------------- //
/** Set gauge ratio with value cut fix
 *
 *	@param	_Gauge		The gauge to set ratio
 *	@param	_Ratio		Ratio to set
 */
Void SetGaugeRatio(CMlGauge _Gauge, Real _Ratio) {
	if (_Gauge == Null) return;
	if (_Ratio <= 0.) { _Gauge.Ratio = 0.; return; }
	if (_Ratio >= 1.) { _Gauge.Ratio = 1.; return; }
	declare GaugeCutOff = 4 / _Gauge.Size.X;
	_Gauge.Ratio = ML::Clamp(_Ratio * (1 - GaugeCutOff) + GaugeCutOff, 0., 1.);
}
"""

/// Code of the ComputeWidth() function
#Const C_ManialinkTools_ComputeWidth """
// ---------------------------------- //
/** Compute label width
 *
 *	@param	_Label		Label to compute its width
 *
 *	@return		Total length of the label text
 */
Real ComputeWidth(CMlLabel _Label) {
	if (_Label == Null || _Label.Value == "") return 0.;
	return _Label.ComputeWidth(_Label.Value) * _Label.RelativeScale;
}
"""

/// Code of the Brightness() function
#Const C_ManialinkTools_Brightness """
// ---------------------------------- //
/** Change color brightness
 *
 *	@param	_Color			Input color
 *	@param	_Brightness		Target brightness
 *
 *	@return		New color
 */
Vec3 Brightness(Vec3 _Color, Real _Brightness) {
	if (_Brightness == 1) return _Color;
	if (_Brightness <= 0) return Vec3;
	
	declare Vec3 OutputColor;
	if (_Brightness < 1) for (I, 0, 2) OutputColor[I] = _Color[I] * _Brightness;
	else if (_Brightness > 1) for (I, 0, 2) OutputColor[I] = 1 - (1 / _Brightness) + _Color[I] * (1 / _Brightness);
	return OutputColor;
}
"""

/// Code of the ReplaceChars() function
#Const C_ManialinkTools_ReplaceChars """
// ---------------------------------- //
/** Replaces special characters with their latin bases
 *
 *	@param	_Input	The text to replace characters
 *
 *	@return		Text with characters replaced
 */
Text ReplaceChars(Text _Input) {
	if (_Input == "") return "";
	declare Output = _Input;
	declare ToReplace = [
		"Ą" => "A", "Ć" => "C", "Ę" => "E", "Ń" => "N", "Ś" => "S", "Ż" => "Z", "Ź" => "Z",
		"ą" => "a", "ć" => "c", "ę" => "e", "ń" => "n", "ś" => "s", "ż" => "z", "ź" => "ż"
	];
	foreach (Char => Replacement in ToReplace) {
		if (!TL::Find(Char, Output, True, True)) continue;
		Output = TL::Replace(Output, Char, Replacement);
	}
	return Output;
}
"""

/// Code of the ColorTransition() function
#Const C_ManialinkTools_ColorTransition """
// ---------------------------------- //
/** Get the color depending on a ratio
 *
 *	@param	_Ratio			The ratio of the color
 *	@param	_ColorRatios	List of the colors for each ratio
 *
 *	@return		The Blend color according to the ratio
 */
Vec3 ColorTransition(Real _Ratio, Vec3[Real] _ColorRatios) {
	if (_ColorRatios.count <= 0) return <0., 0., 0.>;
	if (_ColorRatios.count == 1) foreach (Color in _ColorRatios) return Color;
	if (_ColorRatios.existskey(_Ratio)) return _ColorRatios[_Ratio];
	
	// Sort all colors ratios in ascending order
	declare Real[] SortedRatios;
	foreach (Ratio => Color in _ColorRatios) SortedRatios.add(Ratio);
	SortedRatios = SortedRatios.sort();
	
	// Get the lowest color ratio
	declare MinimumRatio = SortedRatios[0];
	foreach (Ratio in SortedRatios) if (Ratio > MinimumRatio && Ratio < _Ratio) MinimumRatio = Ratio;
	
	// Get the highest color ratio
	declare MaximumRatio = SortedRatios[SortedRatios.count - 1];
	foreach (Ratio in SortedRatios) if (Ratio < MaximumRatio && Ratio > _Ratio) MaximumRatio = Ratio;
	
	// Get the colors blend properties
	declare BlendRatio = (_Ratio - MinimumRatio) / (MaximumRatio - MinimumRatio);
	declare MinimumColor = _ColorRatios[MinimumRatio];
	declare MaximumColor = _ColorRatios[MaximumRatio];
	
	// Compute the final color
	declare Vec3 OutputColor;
	for (I, 0, 2) OutputColor[I] = MinimumColor[I] + (MaximumColor[I] - MinimumColor[I]) * BlendRatio;
	return OutputColor;
}
"""

/// Code of the HsvToRgb() function
#Const C_ManialinkTools_HsvToRgb """
// ---------------------------------- //
/** Convert a HSV color to a RGB color
 *
 *	@param	_HSV	The HSV values [0.-1.[
 *
 *	@return		The RGB values [0.-1.[
 */
Vec3 HsvToRgb(Vec3 _HSV) {
	declare RGB = <0., 0., 0.>;
	declare H = _HSV.X;
	declare S = _HSV.Y;
	declare V = _HSV.Z;
	
	declare Hi = ML::FloorInteger(H * 6.);
	declare F = (H * 6.) - Hi;
	declare P = V * (1. - S);
	declare Q = V * (1. - (F * S));
	declare T = V * (1. - ((1. - F) * S));
	
	switch(Hi) {
		case 0: RGB = <V, T, P>;
		case 1: RGB = <Q, V, P>;
		case 2: RGB = <P, V, T>;
		case 3: RGB = <P, Q, V>;
		case 4: RGB = <T, P, V>;
		default: RGB = <V, P, Q>;
	}
	
	return RGB;
}
"""

/// Code of the TimeToText() function
#Const C_ManialinkTools_TimeToText """
// ---------------------------------- //
/** Get Text from time Tnteger.
 *
 *	@param	_Time			The time Integer to convert.
 *	@param	_Milliseconds	Whether the milliseconds are displayed or not.
 *
 *	@return		Time Integer formatted as Text.
 */
Text TimeToText(Integer _Time, Boolean _Milliseconds) {
	if (_Time == 0) {
		if (_Milliseconds) return "0:00.000";
		return "0:00";
	}

	declare Time = ML::Abs(_Time);

	declare Milliseconds = Time % 1000; 
	declare Seconds = (Time / 1000) % 60;
	declare Minutes = (Time / 60000) % 60;
	declare Hours = (Time / 3600000);

	declare Output = "";
	if (Hours > 0) Output ^= Hours^":"^TL::FormatInteger(Minutes, 2);
	else Output = TL::ToText(Minutes);
	Output ^= ":"^TL::FormatInteger(Seconds, 2);
	if (_Milliseconds) Output ^= "."^TL::FormatInteger(Milliseconds, 3);
	if (_Time < 0) Output = "-"^Output;
	return Output;
}
Text TimeToText(Integer _Time) { return TimeToText(_Time, False); }
"""

/// Code of the GetEchelonImage() function
#Const C_ManialinkTools_GetEchelonImage """
// ---------------------------------- //
/** Get the default image of an Echelon badge.
 *
 *	@param	_Echelon	Level of the Echelon badge to get image.
 *
 *	@return		Image path of the Echelon badge.
 */
Text GetEchelonImage(Integer _Echelon) {
	declare Echelon = ML::Clamp(_Echelon, 0, 9);
	return "file://Media/Manialinks/Common/Echelons/echelon"^Echelon^".dds";
}
"""

/// Code of the SetQuadStyle() function
#Const C_ManialinkTools_SetQuadStyle """
// ---------------------------------- //
/** Set the style of a quad.
 *
 *	@param	_Quad	The quad to set style.
 *	@param	_Style	The style of the quad.
 */
Void SetQuadStyle(CMlQuad _Quad, Text _Style) {
	if (_Quad == Null) return;
	declare Explode = TL::Split("|", _Style);

	if (Explode.count == 2) {
		_Quad.Style = Explode[0];
		_Quad.Substyle = Explode[1];
		_Quad.ImageUrl = "";
	}
	else if (Http.IsValidUrl(_Style)) {
		_Quad.ImageUrl = _Style;
		_Quad.Style = "";
		_Quad.Substyle = "";
	}
	else {
		_Quad.Style = "";
		_Quad.Substyle = "";
		_Quad.ImageUrl = "";
	}
}
"""

/// Code of the RadToDeg() function
#Const C_ManialinkTools_RadToDeg """
// ---------------------------------- //
/** Convert angle in radians to degrees.
 *
 *	@param	_Radians	Angle in radians.
 *
 *	@return		Angle in degrees.
 */
Real RadToDeg(Real _Radians) {
	return _Radians * 180. / ML::PI();
}
"""

/// Code of the RotatePoint() function
#Const C_ManialinkTools_RotatePoint """
// ---------------------------------- //
/** Rotate a point around the origin.
 *
 *	@param	_Point		The point to rotate.
 *	@param	_Origin		Origin of the rotation.
 *	@param	_Angle		Angle to rotate the point by.
 *
 *	@return		Coordinates of the rotated point.
 */
Vec2 RotatePoint(Vec2 _Point, Vec2 _Origin, Real _Angle) {
	declare Point = _Point - _Origin;
	declare Diff = Point - _Point;

	return <
		Point.X * ML::Cos(_Angle) + Point.Y * ML::Sin(_Angle) + Diff.X,
		-Point.X * ML::Sin(_Angle) + Point.Y * ML::Cos(_Angle) + Diff.Y
	>;
}

Vec2 RotatePoint(Vec2 _Point, Real _Angle) {
	return RotatePoint(_Point, <0., 0.>, _Angle);
}
"""

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
/** Get the code of a function
 *
 *	@param	_FunctionName	Name of the function to get code
 *
 *	@return		The code of the function
 */
Text Private_GetFunctionCode(Text _FunctionName) {
	switch (_FunctionName) {
		case "Pulse"			: return C_ManialinkTools_Pulse;
		case "SetGaugeRatio"	: return C_ManialinkTools_SetGaugeRatio;
		case "ComputeWidth"		: return C_ManialinkTools_ComputeWidth;
		case "Brightness"		: return C_ManialinkTools_Brightness;
		case "ReplaceChars"		: return C_ManialinkTools_ReplaceChars;
		case "ColorTransition"	: return C_ManialinkTools_ColorTransition;
		case "HsvToRgb"			: return C_ManialinkTools_HsvToRgb;
		case "TimeToText"		: return C_ManialinkTools_TimeToText;
		case "GetEchelonImage"	: return C_ManialinkTools_GetEchelonImage;
		case "SetQuadStyle"		: return C_ManialinkTools_SetQuadStyle;
		case "RadToDeg"			: return C_ManialinkTools_RadToDeg;
		case "RotatePoint"		: return C_ManialinkTools_RotatePoint;
	}
	return "";
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Inject multiple library functions in manialink
 *
 *	@param	_FunctionsNames		Name of the functions to inject
 *
 *	@return		The functions code
 */
Text Functions(Text[] _FunctionsNames) {
	if (_FunctionsNames.count <= 0) return "";
	declare Output = "";
	declare LoadedFunctions = Text[];
	
	// Get the code of specified functions
	foreach (FunctionName in _FunctionsNames) {
		declare FunctionCode = Private_GetFunctionCode(FunctionName);
		if (FunctionCode != "") LoadedFunctions.add(FunctionCode);
	}
	
	// Return if no finctions were found
	if (LoadedFunctions.count <= 0) return "";
	
	// Return the loaded functions
	foreach (FunctionCode in LoadedFunctions) Output ^= FunctionCode;
	return Output;
}

// ---------------------------------- //
/** Inject one library function in manialink
 *
 *	@param	_FunctionName	Name of the function to inject
 *
 *	@return		The function code
 */
Text Function(Text _FunctionName) { return Functions([_FunctionName]); }

// ---------------------------------- //
/** Inject all available functions in manialink
 *
 *	@return		The functions code
 */
Text AllFunctions() { return Functions(C_ManialinkTools_AvailableFunctions); }