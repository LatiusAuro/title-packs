// -------------------------------------- //
//  PURSUIT UI LIB by domino54            //
//  script version: 2018-04-21            //
// -------------------------------------- //

/**
 *	Pursuit UI Library
 *	This library allows you to use TrackMania Pursuit title interface elements.
 *
 *	Available modules:
 *	- Countdown			Replace default countdown with a custom one.
 *	- Speedometer		Replace default speed and distance labels with custom ones.
 *	- Background		Replace default background with custom, changing color, depending on player clan. PRO only.
 *	- ScoreSummary		Display ShootMania-like teams scores summary in top of the screen, above the countdown.
 *	- ThievesCount		Replace chrono with a Thieves counter in the middle bottom of the screen.
 *	- PoliceCount		Display Policemen counter next to the speed in bottom right screen corner.
 *	- PoliceLights		Display light effects for players in chasing team. Always Blue in FFA.
 *	- RespawnTimer		Display respawn progress bar above Thieves counter. For Thieves only.
 *	- SpecInfo			Replace default spectator player info with custom one with team color and Echelons.
 *	- 321Go				Faster countdown, like in ShootMania and old TrackManias.
 *	- ShowPoints		Display message when and for what player receives points.
 *	- JoinPolice		Display police request window with help. FFA only.
 *	- Detector			Display label showing distance to nearest policemen.
 */

#Const	Version		"2018-04-21"
#Const	ScriptName	"Libs/domino54/TrackMania/PursuitUI.Script.txt"

#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Nadeo/Manialink.Script.txt" as Manialink
#Include "Libs/Nadeo/TrackMania/XmlRpc.Script.txt" as XmlRpc
#Include "Libs/domino54/ManialinkTools.Script.txt" as ManialinkTools
#Include "Libs/domino54/MultiClans.Script.txt" as Clans
#Include "Libs/domino54/SplitScreenLib.Script.txt" as SplitScreen
#Include "Libs/domino54/Translations.Script.txt" as Translations

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ImgBase "file://Media/Manialinks/TrackMania/Pursuit/"
#Const C_LibPursuitUI_CountdownPos		<0., 85.>
#Const C_LibPursuitUI_SpeedometerPos 	<132., -64.>
#Const C_LibPursuitUI_BackgroundPos		<0., -90.>
#Const C_LibPursuitUI_SpecInfoPos		<0., -72.>
#Const C_LibPursuitUI_ScoreSummaryPos	<0., 91.5>
#Const C_LibPursuitUI_ThievesCountPos	<0., -88.>
#Const C_LibPursuitUI_PoliceCountPos	<132., -86.5>
#Const C_LibPursuitUI_RespawnTimerPos	<0., -56.>
#Const C_LibPursuitUI_PoliceLightsPos	<0., -88.>
#Const C_LibPursuitUI_321GoPos			<0., 12., 0.>
#Const C_LibPursuitUI_ShowPointsPos		<0., -72.>
#Const C_LibPursuitUI_JoinPolicePos		<-160., 18.>

/// Function to obtain player's current clan.
#Const C_LibPursuitUI_GetPlayerClan """
Integer GetClan(CTmMlPlayer _Player) {
	if (_Player == Null) return 0;
	if (UseClans) return _Player.CurrentClan;
	declare netread Integer Net_LibPursuitUI_PlayerClan for _Player;
	return Net_LibPursuitUI_PlayerClan;
}
"""

/// Function to obtain clans's color.
#Const C_LibPursuitUI_GetClanColor """
Vec3 GetClanColor(Integer _Clan) {
	if (_Clan <= 0) return Vec3;
	if (UseClans && Teams.existskey(_Clan-1)) return Teams[_Clan-1].ColorPrimary;
	declare netread Vec3[Integer] Net_LibPursuitUI_CustomTeamsColors for Teams[0];
	if (!Net_LibPursuitUI_CustomTeamsColors.existskey(_Clan)) return Vec3;
	return Net_LibPursuitUI_CustomTeamsColors[_Clan];
}
"""

// ---------------------------------- //
// Globales
// ---------------------------------- //
declare Text[] G_LibPursuitUI_ModulesLoaded;
declare Boolean[Text] G_LibPursuitUI_ModuleVisibility;
declare Vec3[Text] G_LibPursuitUI_ModulePosition;
declare Integer G_LibPursuitUI_PrevCutOffTimeLimit;
declare Integer G_LibPursuitUI_PrevClansNbPlayers1;
declare Integer G_LibPursuitUI_PrevClansNbPlayers2;
declare Text G_LibPursuitUI_PrevMapModelName;

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
/** Check if a module is loaded.
 *
 *	@param	_ModuleId	The module to check.
 *
 *	@return		True if the given module is loaded, False otherwise.
 */
Boolean Private_ModuleIsLoaded(Text _ModuleId) {
	return G_LibPursuitUI_ModulesLoaded.exists(_ModuleId);
}

// ---------------------------------- //
/** Update the settings for a module.
 *
 *	@param	_Name	The name of the setting.
 *	@param	_Value	The value of the setting.
 */
Void Private_SetModuleSetting(Text _Name, Text _Value) {
	declare netwrite Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netwrite Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	Net_LibPursuitUI_SettingsUpdate = Now;
	Net_LibPursuitUI_Settings[_Name] = _Value;
}

// ---------------------------------- //
/** Create the manialink for the countdown module.
 *
 *	@return		The countdown manialink.
 */
Text Private_CreateManialinkCountdown() {
	return """
<manialink version="3" name="LibPursuitUI:Countdown">
<framemodel id="FrameModel_Countdown">
	<label halign="center" valign="center2" textsize="4" textemboss="1" textcolor="FB0" textfont="RajdhaniMono" id="Label_Countdown" />
</framemodel>

<frameinstance modelid="FrameModel_Countdown" id="Frame_Countdown#0" />
<frameinstance modelid="FrameModel_Countdown" id="Frame_Countdown#1" />
<frameinstance modelid="FrameModel_Countdown" id="Frame_Countdown#2" />
<frameinstance modelid="FrameModel_Countdown" id="Frame_Countdown#3" />

<script><!--
/**
 *	LibPursuitUI: Countdown
 *	Definitely not the same as in Galaxy, not at all.
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_CountdownSongsNames 	["Countdown1Compressed.ogg", "Countdown02.ogg"]
#Const C_CountdownSongDuration	30000

{{{SplitScreen::Framework()}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare CMlFrame[] Frame_Countdowns;
for (I, 0, 3) Frame_Countdowns.add((Page.GetFirstChild("Frame_Countdown#"^I) as CMlFrame));

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];

// ---------------------------------- //
// Persistent settings
declare persistent Boolean Persistent_LibPursuitUI_DisableCountdownSong for LocalUser;

// ---------------------------------- //
// Varialbes
declare Countdown_Display = False;
declare Countdown_UseMusic = True;
declare ScoreSummary_Display = False;
declare StartTime = -1;
declare EndTime = -1;
declare CurrentTick = -1;
declare CountdownMusic = CAudioSource;
declare UpdateVisibility = True;
declare IsModuleVisible = False;

declare PrevSettingsUpdate = -1;
declare PrevStartTime = -1;
declare PrevTick = -1;

// ---------------------------------- //
// Configure frames
foreach (I => Frame in Frame_Countdowns) {
	Frame.RelativePosition_V3 = SplitScreen_GetPosition({{{C_LibPursuitUI_CountdownPos}}}, I, False);
	Frame.RelativeScale = SplitScreen_GetScale(1.);

	declare Label_Countdown for Frame <=> (Frame.GetFirstChild("Label_Countdown") as CMlLabel);
}
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
		switch (SettingName) {
			case "Countdown_Display" : Countdown_Display = SettingValue == "True";
			case "Countdown_UseMusic" : Countdown_UseMusic = SettingValue == "True";
			case "ScoreSummary_Display" : ScoreSummary_Display = SettingValue == "True";
			case "StartTime" : StartTime = TL::ToInteger(SettingValue);
			case "Countdown_CutOffTimeLimit" : {
				EndTime = TL::ToInteger(SettingValue);
				if (
					CountdownMusic != Null && 
					((EndTime > 0 && GameTime < EndTime - C_CountdownSongDuration) ||
					(EndTime <= 0 && CountdownMusic.PlayCursor < C_CountdownSongDuration / 1000.))
				) {
					CountdownMusic.Stop();
					Audio.DestroySound(CountdownMusic);
					CountdownMusic = Null;
				}
			}
		}
	}

	UpdateVisibility = True;
}

// ---------------------------------- //
// Set visibility
if (UpdateVisibility) {
	UpdateVisibility = False;

	IsModuleVisible = Countdown_Display && StartTime >= 0;

	foreach (I => Frame in Frame_Countdowns) {
		Frame.Visible = (I == 0 || I < SplitScreen_NbPlayers()) && IsModuleVisible;
	}
}

// ---------------------------------- //
// Display current time
if (IsModuleVisible) {
	declare Integer Time;
	declare Countdown = True;
	
	// ---------------------------------- //
	// UI.CountdownEndTime is greater than zero
	if (UI.CountdownEndTime > 0 && GameTime < UI.CountdownEndTime) {
		Time = GameTime - UI.CountdownEndTime;
		CurrentTick = ML::Abs(Time) / 1000 + 1;
		if (CurrentTick > 5 || CurrentTick < 1) CurrentTick = -1;
	}
	// ---------------------------------- //
	// EndTime is greater than zero
	else if (EndTime > 0) {
		Time = GameTime - EndTime;
		CurrentTick = (-Time + 1000) / 1000;
		if (CurrentTick > 31 || CurrentTick < -1) CurrentTick = -1;
		Countdown = GameTime < EndTime;
	}
	// ---------------------------------- //
	// Display game duration
	else {
		Time = GameTime - StartTime;
		CurrentTick = -1;
		Countdown = False;
	}

	declare TimeText = TimeToText(Time, Countdown, ScoreSummary_Display && UseClans);
	
	// Set labels values
	foreach (Frame in Frame_Countdowns) {
		if (!Frame.Visible) continue;
		declare CMlLabel Label_Countdown for Frame;
		Label_Countdown.Value = TimeText;
	}
}

// ---------------------------------- //
// Countdown soundtrack
if (
	Countdown_UseMusic && !Persistent_LibPursuitUI_DisableCountdownSong &&
	EndTime > 0 && EndTime - GameTime < C_CountdownSongDuration && GameTime < EndTime
) {
	// ---------------------------------- //
	// Create new soundtrack
	if (CountdownMusic == Null) {
		declare NextTrackURL = "{{{C_ImgBase}}}Sounds/"^GetCountdownMusicName();
		if (Http.IsValidUrl(NextTrackURL)) CountdownMusic = Audio.CreateSound(NextTrackURL, 15., True, False, False);
	}
	else {
		// ---------------------------------- //
		// Start the music when countdown begins
		if (!CountdownMusic.IsPlaying) CountdownMusic.Play();

		// Adjust the music play cursor if not matching countdown time
		declare NewPlayCursor = (C_CountdownSongDuration - (EndTime - GameTime)) / 1000.;
		if (ML::Abs(CountdownMusic.PlayCursor - NewPlayCursor) > .0625) CountdownMusic.PlayCursor = NewPlayCursor;
	}
}

// ---------------------------------- //
// Stop countdown soundtrack
if (CountdownMusic != Null && CountdownMusic.IsPlaying && CountdownMusic.PlayCursor > C_CountdownSongDuration / 1000. + 5.) CountdownMusic.Stop();

// ---------------------------------- //
// Show animation when last tick changes
if (PrevTick != CurrentTick) {
	PrevTick = CurrentTick;
	declare AnimStartTick = 0;
	
	// ---------------------------------- //
	// Play countdown sounds when the music is not playing
	if (CurrentTick >= 0 && (CountdownMusic == Null || CountdownMusic.PlayCursor <= 0)) {
		// ---------------------------------- //
		// Red countdown
		if (UI.CountdownEndTime <= 0) {
			AnimStartTick = 15;
			switch (CurrentTick) {
				case 15 : Audio.PlaySoundEvent("{{{C_ImgBase}}}/Sounds/UITimeLeftWarning.wav", -7.5);
				case 1 : Audio.PlaySoundEvent("{{{C_ImgBase}}}/Sounds/UITimeTick_D.wav", -12.5);
				case 0 : Audio.PlaySoundEvent("{{{C_ImgBase}}}/Sounds/UITimeOut.wav", -7.5);
				default : if (CurrentTick < 15) {
					if (CurrentTick > 5) Audio.PlaySoundEvent("{{{C_ImgBase}}}/Sounds/UITimeTick_B.wav", -12.5);
					else Audio.PlaySoundEvent("{{{C_ImgBase}}}/Sounds/UITimeTick_C.wav", -12.5);
				}
			}
		}
		// ---------------------------------- //
		// Green countdown
		else {
			AnimStartTick = 5;
			switch (CurrentTick) {
				case 5 : Audio.PlaySoundEvent("{{{C_ImgBase}}}/Sounds/UITimeLeftWarning.wav", -7.5);
				default : if (CurrentTick > 0) Audio.PlaySoundEvent("{{{C_ImgBase}}}/Sounds/UITimeTick_A.wav", -12.5);
			}
		}
	}
	
	// ---------------------------------- //
	// Display tick animation
	if (CurrentTick > 0 && (AnimStartTick == 0 || CurrentTick < AnimStartTick)) {
		foreach (Frame in Frame_Countdowns) {
			if (!Frame.Visible) continue;
			declare CMlLabel Label_Countdown for Frame;

			Label_Countdown.RelativeScale = 2.;
			Label_Countdown.RelativeRotation = 7.5;
			if (UI.CountdownEndTime > 0) Label_Countdown.TextColor = <0., 1., 0.>;
			else Label_Countdown.TextColor = <1., 0., 0.>;
			
			AnimMgr.Add(Label_Countdown, "<label scale='1' textcolor='FB0' rot='0' />", 1000, CAnimManager::EAnimManagerEasing::CircOut);
		}
	}
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Compose text from given time
 *
 *	@param	_Time		Time to transform
 *	@param	_Decimal	Display decimal part when under minute
 *	@param	_CompactHr	Show campact version of hour time
 *
 *	@return		Composed text
 */
Text TimeToText(Integer _Time, Boolean _Decimal, Boolean _CompactHr) {
	if (_Time == 0) return "0.00";
	declare Time = ML::Abs(_Time);
	
	if (_Decimal && Time < 60000) return Time / 1000^"."^(Time / 100) % 10;
	
	declare Seconds = (Time / 1000) % 60;
	declare Minutes = (Time / 60000) % 60;
	declare Hours = Time / 3600000;
	
	if (_CompactHr && Hours > 0) {
		declare Separator = ":";
		if (Time % 1000 < 500) Separator = " ";
		return Hours^Separator^TL::FormatInteger(Minutes, 2);
	}
	
	if (Hours > 0) return Hours^":"^TL::FormatInteger(Minutes, 2)^":"^TL::FormatInteger(Seconds, 2);
	return Minutes^":"^TL::FormatInteger(Seconds, 2);
}

// ---------------------------------- //
/** Get name of next countdown track
 *
 *	@return		Name of the next countdown track.
 */
Text GetCountdownMusicName() {
	if (C_CountdownSongsNames.count <= 0) return "";
	declare persistent Text[] Persistent_LibInterfancy_TimerMusics for LocalUser;
	declare persistent Text Persistent_LibInterfancy_PrevCountdownSong for LocalUser;

	// ---------------------------------- //
	// Check if array includes non-existing tracks
	declare Text[] ToRemove;
	foreach (Track in Persistent_LibInterfancy_TimerMusics) if (!C_CountdownSongsNames.exists(Track)) ToRemove.add(Track);
	foreach (Track in ToRemove) {
		declare Removed = Persistent_LibInterfancy_TimerMusics.remove(Track);
	}

	// Fill the list if empty
	if (Persistent_LibInterfancy_TimerMusics.count <= 0)
		Persistent_LibInterfancy_TimerMusics = C_CountdownSongsNames;

	// ---------------------------------- //
	// Get the next track
	declare CountdownMusicName = "";
	while (Persistent_LibInterfancy_TimerMusics.count > 0) {
		CountdownMusicName = Persistent_LibInterfancy_TimerMusics[ML::Rand(0, Persistent_LibInterfancy_TimerMusics.count - 1)];
		if (CountdownMusicName != Persistent_LibInterfancy_PrevCountdownSong) break;
		if (Persistent_LibInterfancy_TimerMusics.count <= 1) break;
	}
	declare Removed = Persistent_LibInterfancy_TimerMusics.remove(CountdownMusicName);
	Persistent_LibInterfancy_PrevCountdownSong = CountdownMusicName;

	return CountdownMusicName;
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	+++Main+++
	while (True) {
		+++Yield+++
		yield;
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the speed and distance module
 *
 *	@return		The manialink
 */
Text Private_CreateManialinkSpeedometer() {
	declare RPMSteps = "";
	for (I, 0, 63) RPMSteps ^= "<frameinstance modelid='FrameModel_RPMStep' id='Frame_RPMStep#"^I^"' hidden='1' />";

	return """
<manialink version="3" name="LibPursuitUI:Speedometer">
<stylesheet>
	<style class="Value" halign="right" valign="center2" style="TextRaceChrono" />
	<style class="Info" halign="center" valign="center2" style="TextValueSmallSm" textsize="1" textcolor="FFF" opacity=".5" />
	<style class="Font" halign="center" valign="center2" textsize="1" textcolor="FFF" textfont="RajdhaniMono" />
</stylesheet>

<framemodel id="FrameModel_Speedometer">
	<!-- RPM values -->
	<framemodel id="FrameModel_RPMStep">
		<quad size="1.25 21" halign="center" valign="bottom" id="Quad_RPMStepValue" />
		<label pos="0 16" class="Font" textfont="OswaldMono" opacity=".75" text="0" id="Label_RPMStepValue" />
	</framemodel>
	<frame>{{{RPMSteps}}}</frame>

	<!-- RPM gauge -->
	<quad size="1.5 21" halign="center" valign="bottom" image="{{{C_ImgBase}}}Speedometer/GaugeArrow.png" id="Quad_GaugeArrow" hidden="1" />
	<frame pos="0 5.75" size="21 42" halign="right" valign="center">
		<quad pos="0 -5.75" size="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}Speedometer/Gauge.png" rot="-144" id="Quad_GaugeRPM1" />
	</frame>
	<frame size="21 42" halign="left" valign="center">
		<quad pos="-0.125" size="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}Speedometer/Gauge.png" rot="0" id="Quad_GaugeRPM2" />
	</frame>
	<quad size="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}Speedometer/GaugeFill.png" id="Quad_GaugeFill" hidden="1" />

	<!-- Speed, gear and distance -->
	<label pos="0 2" class="Font" textsize="10" text="0" id="Label_Speed" />
	<label pos="0 -3.5" class="Font" textsize=".75" textfont="Oswald" text="KM/H" opacity=".5" id="Label_SpeedUnit" />
	<frame pos="0 -9">
		<label pos="0 -.125" class="Font" textsize="2.5" text="N" id="Label_Gear" />
		<quad size="3.75 5.5" halign="center" valign="center" bgcolor="000" opacity=".2" />
	</frame>
	<frame pos="0 -17">
		<label pos="0 -.25" class="Font" textsize="1.5" textfont="OswaldMono" text="00000.0 M" id="Label_Distance" opacity=".5" />
		<quad size="14 4" halign="center" valign="center" bgcolor="000" opacity=".2" />
	</frame>

	<quad size="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}Speedometer/BG.png" opacity=".75" />

	<frame id="Frame_IsSecure" pos="0 25" hidden="1">
		<quad size="4 4" valign="center" image="{{{C_ImgBase}}}IconSafeTime.png" opacity=".5" />
		<label pos="5 -.25" class="Font" halign="left" textsize="1.5" textfont="OswaldMono" text="" id="Label_IsSecure" opacity=".5" />
		<quad pos="4" size="14 4" valign="center" bgcolor="000" opacity=".2" id="Quad_IsSecureBg" />
	</frame>

	<!-- Safe time gauge -->
	<frame scale="1.05">
		<frame pos="0 5.75" size="21 44.25" halign="right" valign="center">
			<quad pos="0 -5.75" size="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}Speedometer/SafeGauge.png" rot="-144" id="Quad_GaugeSafe1" />
		</frame>
		<frame size="21 42" halign="left" valign="center">
			<quad pos="-0.125" size="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}Speedometer/SafeGauge.png" rot="0" id="Quad_GaugeSafe2" />
		</frame>
		<quad size="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}Speedometer/SafeGaugeFill.png" id="Quad_GaugeFill2" hidden="1" />
	</frame>
</framemodel>

<frameinstance modelid="FrameModel_Speedometer" id="Frame_Speedometer#0" scale="0" />
<frameinstance modelid="FrameModel_Speedometer" id="Frame_Speedometer#1" scale="0" />
<frameinstance modelid="FrameModel_Speedometer" id="Frame_Speedometer#2" scale="0" />
<frameinstance modelid="FrameModel_Speedometer" id="Frame_Speedometer#3" scale="0" />

<script><!--
/**
 *	LibPursuitUI: Speedometer
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_DefaultEngineMaxRPM	10000.

{{{ManialinkTools::Functions(["Brightness", "ComputeWidth"])}}}
{{{Translations::InjectInManialink(["No interaction"])}}}
{{{SplitScreen::Framework()}}}
{{{C_LibPursuitUI_GetPlayerClan}}}
{{{C_LibPursuitUI_GetClanColor}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare CMlFrame[] Frame_Speedometers;
	for (I, 0, 3) Frame_Speedometers.add((Page.GetFirstChild("Frame_Speedometer#"^I) as CMlFrame));

	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];

	// ---------------------------------- //
	// Persistent settings
	declare persistent Persistent_LibPursuitUI_DisableSpeedometer for LocalUser = False;
	declare persistent Persistent_LibPursuitUI_UseRetardedUnits for LocalUser = False;
	declare persistent Persistent_LibPursuitUI_UseWideFormat for LocalUser = False;
	
	// ---------------------------------- //
	// Variables
	declare DisplaySpeedometer = False;
	declare Camera7Forbidden = False;
	declare SafeTimeDuration = 0;
	declare GaugeRPMValue = 0.;
	declare GlobalEngineMaxRPM = C_DefaultEngineMaxRPM;
	declare GaugeMaxRPM = GlobalEngineMaxRPM;
	declare UpdateColor = True;
	declare ConfigureFrames = True;

	declare PrevSettingsUpdate = -1;
	declare PrevUseWideFormat = False;

	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "Speedometer_Display" : DisplaySpeedometer = SettingValue == "True";
					case "Speedometer_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						//for (I, 0, 1) Frame_Speedometer.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
					case "EngineMaxRPM" : {
						declare NewValue = TL::ToReal(SettingValue);
						if (NewValue > 0) GlobalEngineMaxRPM = NewValue;
					}
					case "SafeTime_Duration" : {
						declare NewDuration = TL::ToInteger(SettingValue);
						if (SafeTimeDuration >= 0) SafeTimeDuration = NewDuration;
						else SafeTimeDuration = 0;
					}
					case "Camera7Forbidden" : Camera7Forbidden = SettingValue == "True";
				}
			}
		}

		// ---------------------------------- //
		// Disable camera 7
		if (CurPlayerCamera == 2 && Camera7Forbidden) CurPlayerCamera = 5;

		if (!PageIsVisible) continue;

		// ---------------------------------- //
		// Split screen format change
		if (PrevUseWideFormat != Persistent_LibPursuitUI_UseWideFormat) {
			PrevUseWideFormat = Persistent_LibPursuitUI_UseWideFormat;
			ConfigureFrames = True;
		}

		// ---------------------------------- //
		// Configure frames
		if (ConfigureFrames) {
			ConfigureFrames = False;

			foreach (I => Frame in Frame_Speedometers) {
				Frame.Visible = I == 0 || I < SplitScreen_NbPlayers();
				Frame.RelativePosition_V3 = SplitScreen_GetPosition(
					{{{C_LibPursuitUI_SpeedometerPos}}}, I,
					CMlControl::AlignHorizontal::Right,
					CMlControl::AlignVertical::Bottom,
					Persistent_LibPursuitUI_UseWideFormat
				);
				Frame.RelativeScale = SplitScreen_GetScale(1.);

				declare Label_Speed 	for Frame <=> (Frame.GetFirstChild("Label_Speed") as CMlLabel);
				declare Label_SpeedUnit for Frame <=> (Frame.GetFirstChild("Label_SpeedUnit") as CMlLabel);
				declare Label_Gear 		for Frame <=> (Frame.GetFirstChild("Label_Gear") as CMlLabel);
				declare Label_Distance 	for Frame <=> (Frame.GetFirstChild("Label_Distance") as CMlLabel);
				declare Quad_GaugeRPM1 	for Frame <=> (Frame.GetFirstChild("Quad_GaugeRPM1") as CMlQuad);
				declare Quad_GaugeRPM2 	for Frame <=> (Frame.GetFirstChild("Quad_GaugeRPM2") as CMlQuad);
				declare Quad_GaugeArrow for Frame <=> (Frame.GetFirstChild("Quad_GaugeArrow") as CMlQuad);
				declare Quad_GaugeFill 	for Frame <=> (Frame.GetFirstChild("Quad_GaugeFill") as CMlQuad);
				
				declare Quad_GaugeSafe1 for Frame <=> (Frame.GetFirstChild("Quad_GaugeSafe1") as CMlQuad);
				declare Quad_GaugeSafe2 for Frame <=> (Frame.GetFirstChild("Quad_GaugeSafe2") as CMlQuad);
				declare Quad_GaugeFill2 for Frame <=> (Frame.GetFirstChild("Quad_GaugeFill2") as CMlQuad);
				declare Frame_IsSecure 	for Frame <=> (Frame.GetFirstChild("Frame_IsSecure") as CMlFrame);
				declare Label_IsSecure 	for Frame <=> (Frame.GetFirstChild("Label_IsSecure") as CMlLabel);
				declare Quad_IsSecureBg for Frame <=> (Frame.GetFirstChild("Quad_IsSecureBg") as CMlQuad);

				declare CMlFrame[] Frame_RPMSteps for Frame;
				for (I, 0, 63) Frame_RPMSteps.add((Frame.GetFirstChild("Frame_RPMStep#"^I) as CMlFrame));

				// Translation
				Label_IsSecure.Value = TL::ToUpperCase(Translate("No interaction"));
				Quad_IsSecureBg.Size.X = ComputeWidth(Label_IsSecure) + 2.;
				Frame_IsSecure.RelativePosition_V3.X = (Quad_IsSecureBg.Size.X + 4.) * -.5;
			}
		}
		
		foreach (FrameId => Frame in Frame_Speedometers) {
			declare Player <=> SplitScreen_GetTmPlayer(FrameId);

			// ---------------------------------- //
			// Update speedometer visibility
			declare SpeedometerVisible = DisplaySpeedometer && !Persistent_LibPursuitUI_DisableSpeedometer && Player != Null && Player.IsSpawned;
			declare PrevSpeedometerVisible for Frame = !SpeedometerVisible;

			if (PrevSpeedometerVisible != SpeedometerVisible) {
				PrevSpeedometerVisible = SpeedometerVisible;

				declare Scale = 0.;
				declare Easing = CAnimManager::EAnimManagerEasing::CircIn;
				if (SpeedometerVisible) {
					Scale = SplitScreen_GetScale(1.);
					Easing = CAnimManager::EAnimManagerEasing::CircOut;
				}

				AnimMgr.Add(Frame, "<frame scale='"^Scale^"' />", 250, Easing);
			}

			if (!SpeedometerVisible) continue;

			// ---------------------------------- //
			// Update variables
			declare PrevEngineGear		for Frame = -1;
			declare PrevDistance		for Frame = -1.;
			declare PrevGaugeRPMValue	for Frame = 0.;
			declare PrevGaugeMaxRPM		for Frame = -1.;
			declare PrevPlayerId		for Frame = NullId;
			declare PrevPlayerClan		for Frame = -1;
			declare PrevInterfaceColor	for Frame = Vec3;
			declare PrevGaugeSafeValue	for Frame = -1.;
			declare PrevUseRetardedUnits for Frame = False;

			// ---------------------------------- //
			// Frame components
			declare CMlLabel Label_Speed 		for Frame;
			declare CMlLabel Label_SpeedUnit 	for Frame;
			declare CMlLabel Label_Gear 		for Frame;
			declare CMlLabel Label_Distance 	for Frame;
			declare CMlQuad Quad_GaugeRPM1 		for Frame;
			declare CMlQuad Quad_GaugeRPM2 		for Frame;
			declare CMlQuad Quad_GaugeArrow		for Frame;
			declare CMlQuad Quad_GaugeFill 		for Frame;
			declare CMlQuad Quad_GaugeSafe1		for Frame;
			declare CMlQuad Quad_GaugeSafe2		for Frame;
			declare CMlQuad Quad_GaugeFill2		for Frame;
			declare CMlFrame Frame_IsSecure		for Frame;
			declare CMlFrame[] Frame_RPMSteps	for Frame;
			
			// ---------------------------------- //
			// On units change
			if (PrevUseRetardedUnits != Persistent_LibPursuitUI_UseRetardedUnits) {
				PrevUseRetardedUnits = Persistent_LibPursuitUI_UseRetardedUnits;
				PrevDistance = -1.;

				if (PrevUseRetardedUnits) Label_SpeedUnit.Value = "MPH";
				else Label_SpeedUnit.Value = "KM/H";
			}
			
			// Update speed
			if (PrevUseRetardedUnits) Label_Speed.Value = TL::ToText(ML::Abs(ML::FloorInteger(Player.Speed * 2.24)));
			else Label_Speed.Value = TL::ToText(Player.DisplaySpeed);

			// Update gear
			if (PrevEngineGear != Player.EngineCurGear) {
				PrevEngineGear = Player.EngineCurGear;

				if (PrevEngineGear <= 0) Label_Gear.Value = "R";
				else Label_Gear.Value = TL::ToText(PrevEngineGear);

				Label_Gear.Opacity = 0.;
				AnimMgr.Add(Label_Gear, "<label opacity='1' />", 250, CAnimManager::EAnimManagerEasing::Linear);
			}
			
			// Update distance
			if (PrevDistance != Player.Distance) {
				PrevDistance = Player.Distance;

				declare Distance = Player.Distance;
				if (PrevUseRetardedUnits) Distance /= 1.6;

				Label_Distance.Value = TL::FormatInteger(ML::FloorInteger(Distance), 5)^"."^(ML::FloorInteger(Distance * 10) % 10);

				if (PrevUseRetardedUnits) Label_Distance.Value ^= " Mi";
				else Label_Distance.Value ^= " M";
			}

			// ---------------------------------- //
			// Show the current RPM value
			GaugeRPMValue = Player.EngineRpm / GaugeMaxRPM;
			if (GaugeRPMValue < .025 || GameTime <= Player.RaceStartTime) GaugeRPMValue = 0.;

			if (PrevGaugeRPMValue != GaugeRPMValue) {
				PrevGaugeRPMValue = GaugeRPMValue;

				Quad_GaugeFill.Visible = GaugeRPMValue > 0;
				Quad_GaugeRPM1.RelativeRotation = ML::Clamp(GaugeRPMValue * 2, 0., 1.) * 144 - 144;
				Quad_GaugeRPM2.RelativeRotation = ML::Clamp((GaugeRPMValue - .5) * 2, 0., 1.) * 144.;
				Quad_GaugeArrow.RelativeRotation = ML::Clamp(GaugeRPMValue, 0., 1.) * 288. - 144.;
			}

			// ---------------------------------- //
			// Update the max RPM value
			GaugeMaxRPM = GlobalEngineMaxRPM;

			declare netread Real Net_LibPursuitUI_PlayerEngineMaxRPM for Player;
			if (Net_LibPursuitUI_PlayerEngineMaxRPM > 0) GaugeMaxRPM = Net_LibPursuitUI_PlayerEngineMaxRPM;

			if (PrevGaugeMaxRPM != GaugeMaxRPM) {
				PrevGaugeMaxRPM = GaugeMaxRPM;

				foreach (I => Frame in Frame_RPMSteps) {
					declare StepRPM = (I + 1) * 250.;
					Frame.Visible = StepRPM < GaugeMaxRPM;
					if (!Frame.Visible) continue;

					// Set frame rotation
					Frame.RelativeRotation = (StepRPM / GaugeMaxRPM) * 288. - 144.;
					declare IsFullStep = StepRPM / 1000 == ML::FloorInteger(StepRPM / 1000);
					
					// Set the step label
					declare Label_RPMStepValue <=> (Frame.GetFirstChild("Label_RPMStepValue") as CMlLabel);
					Label_RPMStepValue.Visible = IsFullStep;
					if (Label_RPMStepValue.Visible) {
						Label_RPMStepValue.Value = TL::ToText(ML::FloorInteger(StepRPM / 1000));
						Label_RPMStepValue.RelativeRotation = -Frame.RelativeRotation;
					}

					// Set the step image
					declare Quad_RPMStepValue <=> (Frame.GetFirstChild("Quad_RPMStepValue") as CMlQuad);
					if (IsFullStep) Quad_RPMStepValue.ImageUrl = "{{{C_ImgBase}}}Speedometer/Step.png";
					else Quad_RPMStepValue.ImageUrl = "{{{C_ImgBase}}}Speedometer/StepSmall.png";
				}
			}

			// ---------------------------------- //
			// Get the player's safe time
			declare GaugeSafeValue = 0.;
			if (SafeTimeDuration > 0) {
				if (GameTime <= Player.RaceStartTime) GaugeSafeValue = 1.;
				else if (GameTime >= Player.RaceStartTime + SafeTimeDuration) GaugeSafeValue = 0.;
				else GaugeSafeValue = 1. - (ML::ToReal(GameTime - Player.RaceStartTime) / SafeTimeDuration);
			}
			
			if (GaugeSafeValue < .005) GaugeSafeValue = 0.;
			Frame_IsSecure.Visible = GaugeSafeValue > 0.;
			
			// ---------------------------------- //
			// Show the current safe time
			if (PrevGaugeSafeValue != GaugeSafeValue) {
				PrevGaugeSafeValue = GaugeSafeValue;

				Quad_GaugeFill2.Visible = GaugeSafeValue > 0;
				Quad_GaugeSafe1.RelativeRotation = ML::Clamp(GaugeSafeValue * 2, 0., 1.) * 144 - 144;
				Quad_GaugeSafe2.RelativeRotation = ML::Clamp((GaugeSafeValue - .5) * 2, 0., 1.) * 144.;
			}

			// ---------------------------------- //
			// Update the interface color
			declare InterfaceColor for Frame = <1., 0., 0.>;

			if (PrevPlayerId != Player.Id) {
				PrevPlayerId = Player.Id;
				UpdateColor = True;
			}
			if (PrevPlayerClan != GetClan(Player)) {
				PrevPlayerClan = GetClan(Player);
				UpdateColor = True;
			}
			if (UpdateColor) {
				UpdateColor = False;

				if (PrevPlayerClan > 0) InterfaceColor = GetClanColor(PrevPlayerClan);

				// Split screen color or user setting
				else switch (Player.User.Login) {
					case "*splitscreen_0*" : InterfaceColor = <0., 0., 1.>;
					case "*splitscreen_1*" : InterfaceColor = <1., 0., 0.>;
					case "*splitscreen_2*" : InterfaceColor = <0., 1., 0.>;
					case "*splitscreen_3*" : InterfaceColor = <.5, 0., 1.>;
					default : InterfaceColor = Player.User.Color;
				}

				InterfaceColor = Brightness(InterfaceColor, 1.5);
			}

			if (PrevInterfaceColor != InterfaceColor) {
				PrevInterfaceColor = InterfaceColor;

				Quad_GaugeFill.Colorize = InterfaceColor;
				Quad_GaugeRPM1.Colorize = InterfaceColor;
				Quad_GaugeRPM2.Colorize = InterfaceColor;
				Quad_GaugeArrow.Colorize = InterfaceColor;
				Quad_GaugeFill2.Colorize = InterfaceColor;
				Quad_GaugeSafe1.Colorize = InterfaceColor;
				Quad_GaugeSafe2.Colorize = InterfaceColor;
			}
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the background module
 *
 *	@return		The background manialink.
 */
Text Private_CreateManialinkBackground() {
	return """
<manialink version="3" name="LibPursuitUI:Background">
<framemodel id="FrameModel_Background">
	<quad size="320 24" halign="center" valign="bottom" opacity="0" colorize="000" image="{{{C_ImgBase}}}TeamColor.png" id="Quad_Gradient" />
</framemodel>

<frameinstance modelid="FrameModel_Background" id="Frame_Background#0" z-index="-65" />
<frameinstance modelid="FrameModel_Background" id="Frame_Background#1" z-index="-65" />
<frameinstance modelid="FrameModel_Background" id="Frame_Background#2" z-index="-65" />
<frameinstance modelid="FrameModel_Background" id="Frame_Background#3" z-index="-65" />

<script><!--
/**
 *	LibPursuitUI: Background
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

{{{SplitScreen::Framework()}}}
{{{C_LibPursuitUI_GetPlayerClan}}}
{{{C_LibPursuitUI_GetClanColor}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare CMlFrame[] Frame_Backgrounds;
	for (I, 0, 3) Frame_Backgrounds.add((Page.GetFirstChild("Frame_Background#"^I) as CMlFrame));

	// ---------------------------------- //
	// Variables
	declare PrevGUIPlayerLogin = "";
	declare PrevPlayerClan = -1;
	declare PrevSettingsUpdate = -1;

	// ---------------------------------- //
	// Configure frames
	foreach (I => Frame in Frame_Backgrounds) {
		Frame.Visible = I == 0 || I < SplitScreen_NbPlayers();
		Frame.RelativePosition_V3 = SplitScreen_GetPosition({{{C_LibPursuitUI_BackgroundPos}}}, I, False);
		Frame.RelativeScale = SplitScreen_GetScale(1.);

		declare Quad_Gradient for Frame <=> (Frame.GetFirstChild("Quad_Gradient") as CMlQuad);
		Quad_Gradient.Size.X = 320.;

		switch (SplitScreen_SplitMode()) {
			case 1 : Quad_Gradient.Size.X *= 2.;
			case 2 : Quad_Gradient.Size.X /= 2.;
		}
	}
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		foreach (I => Frame in Frame_Backgrounds) {
			if (!Frame.Visible) continue;
			declare Player <=> SplitScreen_GetTmPlayer(I);

			// Get player clan
			declare PlayerClan = 0;
			if (Player != Null) PlayerClan = GetClan(Player);
			
			// ---------------------------------- //
			// Update interface clan color
			declare PrevPlayerLogin for Frame = "";
			declare PrevPlayerClan for Frame = -1;

			if (PrevPlayerClan != PlayerClan) {
				declare Color = "000";
				declare Opacity = 0.;

				if (PlayerClan > 0) {
					Color = TL::ColorToText(GetClanColor(PlayerClan));
					Opacity = .875;
				}
				
				declare CMlQuad Quad_Gradient for Frame;
				AnimMgr.Add(Quad_Gradient, "<quad colorize='"^Color^"' opacity='"^Opacity^"' />", 250, CAnimManager::EAnimManagerEasing::Linear);
				
				// Play capture sound
				if (PlayerClan == 1 && PrevPlayerClan == 2 && Player != Null && PrevPlayerLogin == Player.User.Login)
					Audio.PlaySoundEvent("{{{C_ImgBase}}}Sounds/Captured.wav", 0.);
				
				PrevPlayerClan = PlayerClan;
			}
			
			// Update player login
			if (Player != Null && PrevPlayerLogin != Player.User.Login) PrevPlayerLogin = Player.User.Login;
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the spectator info module.
 *
 *	@return		The spectator info manialink.
 */
Text Private_CreateManialinkSpecInfo() {
	return """
<manialink version="3" name="LibPursuitUI:SpecInfo">
<stylesheet>
	<style class="Font" halign="center" valign="center2" textemboss="1" textsize="2.5" textcolor="FFF" textfont="RajdhaniMono" />
</stylesheet>

<frame id="Frame_SpectatorInfos" pos="{{{C_LibPursuitUI_SpecInfoPos.X^" "^C_LibPursuitUI_SpecInfoPos.Y}}}" hidden="1">
	<label pos="0 -.2" size="68" class="Font" id="Label_PlayerUserName" />
	<quad pos="-36" size="5 5" halign="center" valign="center" id="Quad_PlayerAvatarImage" />
	<quad pos="-40 .1" size="2 6" halign="right" valign="center" style="Hud3dEchelons" id="Quad_PlayerEchelonIcon" hidden="1" />
	<label pos="36.5 -.2" class="Font" id="Label_PlayerPosition" />

	<quad size="80 6" halign="center" valign="center" bgcolor="FFF" opacity=".25" id="Quad_CardBackground" ScriptEvents="1" />
	<quad size="80 6" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0" />
</frame>

<script><!--
/**
 *	LibPursuitUI: SpecInfo
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
/** Get Echelon substyle from enumerator.
 *
 *	@param	_Echelon	Echelon enumerator.
 *
 *	@return		Echelon substyle string.
 */
Text GetEchelonSubStyle(CUser::EEchelon _Echelon) {
	switch (_Echelon) {
		case CUser::EEchelon::Bronze1 : return "EchelonBronze1";
		case CUser::EEchelon::Bronze2 : return "EchelonBronze2";
		case CUser::EEchelon::Bronze3 : return "EchelonBronze3";
		case CUser::EEchelon::Silver1 : return "EchelonSilver1";
		case CUser::EEchelon::Silver2 : return "EchelonSilver2";
		case CUser::EEchelon::Silver3 : return "EchelonSilver3";
		case CUser::EEchelon::Gold1 : return "EchelonGold1";
		case CUser::EEchelon::Gold2 : return "EchelonGold2";
		case CUser::EEchelon::Gold3 : return "EchelonGold3";
	}
	return "";
}

{{{C_LibPursuitUI_GetPlayerClan}}}
{{{C_LibPursuitUI_GetClanColor}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_SpectatorInfos	<=> (Page.GetFirstChild("Frame_SpectatorInfos")		as CMlFrame);
	declare Quad_CardBackground		<=> (Page.GetFirstChild("Quad_CardBackground")		as CMlQuad);
	declare Label_PlayerUserName	<=> (Page.GetFirstChild("Label_PlayerUserName")		as CMlLabel);
	declare Quad_PlayerAvatarImage	<=> (Page.GetFirstChild("Quad_PlayerAvatarImage")	as CMlQuad);
	declare Quad_PlayerEchelonIcon	<=> (Page.GetFirstChild("Quad_PlayerEchelonIcon")	as CMlQuad);
	declare Label_PlayerPosition	<=> (Page.GetFirstChild("Label_PlayerPosition")		as CMlLabel);
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	
	// ---------------------------------- //
	// Variables
	declare DisplaySpecInfo = False;
	declare UpdateInterfaceColor = True;
	
	declare PrevSettingsUpdate = -1;
	declare PrevGUIPlayerId = NullId;
	declare PrevGUIPlayerClan = -1;
	declare PrevGUIPlayerPosition = -1;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "SpecInfo_Display" : DisplaySpecInfo = SettingValue == "True";
				}
			}
		}
		
		Frame_SpectatorInfos.Visible = DisplaySpecInfo && GUIPlayer != Null && GUIPlayer.User != LocalUser && GUIPlayer.IsSpawned;
		if (!Frame_SpectatorInfos.Visible) continue;
		
		// ---------------------------------- //
		// Events management
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlEvent::Type::MouseClick) {
				if (Event.ControlId == "Quad_CardBackground") ShowProfile(GUIPlayer.User.Login);
			}
		}

		// ---------------------------------- //
		// GUIPlayer has been changed
		if (PrevGUIPlayerId != GUIPlayer.Id) {
			PrevGUIPlayerId = GUIPlayer.Id;
			UpdateInterfaceColor = True;

			// Set player's name and avatar image
			Label_PlayerUserName.Value = GUIPlayer.User.Name;
			Quad_PlayerAvatarImage.ImageUrl = TL::Replace("file://Avatars/%1/default", "%1", GUIPlayer.User.Login);

			// Set player Echelon
			Quad_PlayerEchelonIcon.Visible = GUIPlayer.User.Echelon != CUser::EEchelon::None;
			if (Quad_PlayerEchelonIcon.Visible) Quad_PlayerEchelonIcon.Substyle = GetEchelonSubStyle(GUIPlayer.User.Echelon);
		}

		// Force color update on clan change
		if (PrevGUIPlayerClan != GetClan(GUIPlayer)) {
			PrevGUIPlayerClan = GetClan(GUIPlayer);
			UpdateInterfaceColor = True;
		}

		// ---------------------------------- //
		// Update the interface color
		if (UpdateInterfaceColor) {
			UpdateInterfaceColor = False;

			declare InterfaceColor = GUIPlayer.User.Color;
			if (PrevGUIPlayerClan > 0) InterfaceColor = GetClanColor(PrevGUIPlayerClan);
			Quad_CardBackground.BgColor = InterfaceColor;
		}
		
		// ---------------------------------- //
		// Set player position
		Label_PlayerPosition.Visible = Scores.exists(GUIPlayer.Score);

		if (Label_PlayerPosition.Visible && PrevGUIPlayerPosition != Scores.keyof(GUIPlayer.Score)) {
			PrevGUIPlayerPosition = Scores.keyof(GUIPlayer.Score);
			Label_PlayerPosition.Value = "#"^PrevGUIPlayerPosition + 1;
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the team scores module
 *
 *	@return		The manialink
 */
Text Private_CreateManialinkScoreSummary() {
	return """
<manialink version="3" name="LibPursuitUI:ScoreSummary">
<stylesheet>
	<style class="MapPoints" size="10 10" style="TextRaceMessageBig" textsize="6" />
</stylesheet>

<frame id="Frame_ScoreSummary" pos="{{{C_LibPursuitUI_ScoreSummaryPos.X^" "^C_LibPursuitUI_ScoreSummaryPos.Y}}}" hidden="1">
	<quad size="22 11" style="UiSMSpectatorScoreBig" substyle="HandleLeft" id="Quad_Score1" halign="right" />
	<quad size="22 11" style="UiSMSpectatorScoreBig" substyle="HandleRight" id="Quad_Score2" />
	<label pos="-7 -5 1" halign="center" valign="center2" style="TextValueSmallSm" textsize="4" id="Label_RoundPoints1" />
	<label pos="7 -5 1" halign="center" valign="center2" style="TextValueSmallSm" textsize="4" id="Label_RoundPoints2" />
	<frame id="Frame_TeamsTasks" pos="0 -5 1" hidden="1">
		<quad pos="22" size="5 5" halign="center" valign="center2" style="Icons64x64_1" substyle="Maximize" id="Quad_TaskPolice" />
		<quad pos="22" size="6 6" halign="center" valign="center2" style="Icons64x64_1" substyle="Opponents" id="Quad_TaskThieves" />
	</frame>
</frame>

<script><!--
/**
 *	LibPursuitUI: ScoreSummary
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_ScoreSummary	<=> (Page.GetFirstChild("Frame_ScoreSummary")	as CMlFrame);
	declare Quad_Score1			<=> (Page.GetFirstChild("Quad_Score1")			as CMlQuad);
	declare Quad_Score2			<=> (Page.GetFirstChild("Quad_Score2")			as CMlQuad);
	declare Label_RoundPoints1	<=> (Page.GetFirstChild("Label_RoundPoints1")	as CMlLabel);
	declare Label_RoundPoints2	<=> (Page.GetFirstChild("Label_RoundPoints2")	as CMlLabel);
	declare Frame_TeamsTasks	<=> (Page.GetFirstChild("Frame_TeamsTasks")		as CMlFrame);
	declare Quad_TaskPolice		<=> (Page.GetFirstChild("Quad_TaskPolice")		as CMlQuad);
	declare Quad_TaskThieves	<=> (Page.GetFirstChild("Quad_TaskThieves")		as CMlQuad);
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	declare netread Integer Net_LibPursuitUI_EscapingClan for Teams[0];
	declare netread Vec3[Integer] Net_LibPursuitUI_TeamsColors for Teams[0];
	
	// ---------------------------------- //
	// Variables
	declare DisplayScoreSummary = False;
	declare EscapingClan = 0;
	
	declare PrevSettingsUpdate = -1;
	declare PrevEscapingClan = 0;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "ScoreSummary_Display" : DisplayScoreSummary = SettingValue == "True";
					case "ScoreSummary_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						for (I, 0, 1) Frame_ScoreSummary.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
				}
			}
		}
		
		Frame_ScoreSummary.Visible = (UseClans && DisplayScoreSummary);
		if (!Frame_ScoreSummary.Visible) continue;
		
		EscapingClan = Net_LibPursuitUI_EscapingClan;
		
		// ---------------------------------- //
		// Update scores
		Label_RoundPoints1.Value = TL::ToText(ClanScores[1]);
		Label_RoundPoints2.Value = TL::ToText(ClanScores[2]);
		
		// ---------------------------------- //
		// Update colors
		if (Net_LibPursuitUI_TeamsColors.existskey(1)) Quad_Score1.Colorize = Net_LibPursuitUI_TeamsColors[1];
		if (Net_LibPursuitUI_TeamsColors.existskey(2)) Quad_Score2.Colorize = Net_LibPursuitUI_TeamsColors[2];
		
		// ---------------------------------- //
		// Update task icons
		if (PrevEscapingClan != EscapingClan) {
			PrevEscapingClan = EscapingClan;
			
			Frame_TeamsTasks.Visible = EscapingClan > 0;
			declare PositionX = ML::Abs(Quad_TaskPolice.RelativePosition_V3.X);
			
			switch (EscapingClan) {
				case 1 : {
					Quad_TaskPolice.RelativePosition_V3.X = PositionX;
					Quad_TaskThieves.RelativePosition_V3.X = -PositionX;
				}
				case 2 : {
					Quad_TaskPolice.RelativePosition_V3.X = -PositionX;
					Quad_TaskThieves.RelativePosition_V3.X = PositionX;
				}
			}
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the thieves counter module.
 *
 *	@return		The thieves counter manialink.
 */
Text Private_CreateManialinkThievesCount() {
	return """
<manialink version="3" name="LibPursuitUI:ThievesCount">
<stylesheet>
	<style class="Font" halign="center" valign="center2" textemboss="1" textcolor="FFF" textfont="RajdhaniMono" />
</stylesheet>

<framemodel id="FrameModel_ThievesCount">
	<label pos="0 5" class="Font" textsize="7" id="Label_NbThieves" opacity="0" />
	<label size="32 3" class="Font" textsize="1.5" id="Label_Subtitle" opacity="0" />
</framemodel>

<frameinstance modelid="FrameModel_ThievesCount" id="Frame_ThievesCount#0" />
<frameinstance modelid="FrameModel_ThievesCount" id="Frame_ThievesCount#1" />
<frameinstance modelid="FrameModel_ThievesCount" id="Frame_ThievesCount#2" />
<frameinstance modelid="FrameModel_ThievesCount" id="Frame_ThievesCount#3" />

<script><!--
/**
 *	LibPursuitUI: ThievesCount
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_AnimDuration 500

{{{Translations::InsertToManialink(["Thieves left"])}}}
{{{SplitScreen::Framework()}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare CMlFrame[] Frame_ThievesCount;
	for (I, 0, 3) Frame_ThievesCount.add((Page.GetFirstChild("Frame_ThievesCount#"^I) as CMlFrame));
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	
	declare netread Integer[] Net_LibPursuitUI_ClansNbPlayers for Teams[0];
	declare netread Integer Net_LibPursuitUI_EscapingClan for Teams[0];
	wait(Net_LibPursuitUI_ClansNbPlayers.count == 3);
	
	// ---------------------------------- //
	// Variables
	declare EscapingClan = 0;
	declare ClansNbPlayers = [0, 0, 0];
	declare NbThievesAlive = 0;
	
	declare PrevSettingsUpdate = -1;
	declare PrevNbThieves = -1;

	// ---------------------------------- //
	// Configure frames
	foreach (I => Frame in Frame_ThievesCount) {
		Frame.Visible = I == 0 || I < SplitScreen_NbPlayers();
		Frame.RelativePosition_V3 = SplitScreen_GetPosition({{{C_LibPursuitUI_ThievesCountPos}}}, I, False);
		Frame.RelativeScale = SplitScreen_GetScale(1.);

		declare Label_NbThieves	for Frame <=> (Frame.GetFirstChild("Label_NbThieves") as CMlLabel);
		declare Label_Subtitle	for Frame <=> (Frame.GetFirstChild("Label_Subtitle") as CMlLabel);

		// Translations
		Label_Subtitle.SetText("$T"^Translate("Thieves left"));
	}
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		/*
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "ThievesCount_Display" : Frame_ThievesCount.Visible = SettingValue == "True";
					case "ThievesCount_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						for (I, 0, 1) Frame_ThievesCount.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
				}
			}
		}
		
		if (!Frame_ThievesCount.Visible) continue;
		*/
		
		// ---------------------------------- //
		// Define current Thieves amount
		EscapingClan = Net_LibPursuitUI_EscapingClan;
		for (I, 0, 2) ClansNbPlayers[I] = Net_LibPursuitUI_ClansNbPlayers[I];
		NbThievesAlive = ClansNbPlayers[EscapingClan];
		
		// ---------------------------------- //
		// Update amount label
		if (PrevNbThieves != NbThievesAlive) {
			foreach (I => Frame in Frame_ThievesCount) {
				if (!Frame.Visible) continue;

				declare CMlLabel Label_NbThieves for Frame;
				Label_NbThieves.SetText(TL::ToText(NbThievesAlive));
			}
			
			declare CAnimManager::EAnimManagerEasing Easing;
			
			// ---------------------------------- //
			// Thieves amount has changed
			if (NbThievesAlive > 0 && PrevNbThieves > 0) {
				Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 0, 0.);

				declare Color = "F00";
				if (NbThievesAlive > PrevNbThieves) Color = "0F0";
				
				foreach (I => Frame in Frame_ThievesCount) {
					if (!Frame.Visible) continue;

					declare CMlLabel Label_NbThieves for Frame;
					declare CMlLabel Label_Subtitle for Frame;
					
					Label_NbThieves.Opacity = 1.;
					Label_Subtitle.Opacity = 1.;
					
					AnimMgr.Add(Label_NbThieves, "<label scale='1.25' textcolor='"^Color^"' />", C_AnimDuration/2, CAnimManager::EAnimManagerEasing::SineOut);
					AnimMgr.AddChain(Label_NbThieves, "<label scale='1' textcolor='FFF' />", C_AnimDuration/2, CAnimManager::EAnimManagerEasing::SineIn);
				}
			}
			// ---------------------------------- //
			// Show counter
			else if (NbThievesAlive > 0 && PrevNbThieves <= 0) {
				Easing = CAnimManager::EAnimManagerEasing::CircOut;

				foreach (I => Frame in Frame_ThievesCount) {
					if (!Frame.Visible) continue;

					declare CMlLabel Label_NbThieves for Frame;
					declare CMlLabel Label_Subtitle for Frame;

					Frame.RelativeScale = SplitScreen_GetScale(2.);
					Label_NbThieves.Opacity = 0.;
					Label_NbThieves.TextColor = <1., 1., 1.>;
					Label_Subtitle.Opacity = 0.;
					
					AnimMgr.Add(Frame, "<frame scale='"^SplitScreen_GetScale(1.)^"' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_NbThieves, "<label opacity='1' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_Subtitle, "<label opacity='1' />", C_AnimDuration, Easing);
				}
			}
			// ---------------------------------- //
			// Hide counter
			else if (NbThievesAlive <= 0 && PrevNbThieves > 0) {
				Easing = CAnimManager::EAnimManagerEasing::CircIn;

				foreach (I => Frame in Frame_ThievesCount) {
					if (!Frame.Visible) continue;

					declare CMlLabel Label_NbThieves for Frame;
					declare CMlLabel Label_Subtitle for Frame;

					Frame.RelativeScale = SplitScreen_GetScale(1.);
					Label_NbThieves.Opacity = 1.;
					Label_NbThieves.TextColor = <1., 1., 1.>;
					Label_Subtitle.Opacity = 1.;
					
					AnimMgr.Add(Frame, "<frame scale='"^SplitScreen_GetScale(.5)^"' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_NbThieves, "<label opacity='0' />", C_AnimDuration, Easing);
					AnimMgr.Add(Label_Subtitle, "<label opacity='0' />", C_AnimDuration, Easing);
				}
			}
			
			PrevNbThieves = NbThievesAlive;
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the police counter module.
 *
 *	@return		The police counter manialink.
 */
Text Private_CreateManialinkPoliceCount() {
	return """
<manialink version="3" name="LibPursuitUI:PoliceCount">
<framemodel id="FrameModel_PoliceCount">
	<frame id="Frame_IconOffset">
		<quad size="5.5 5.5" valign="center" image="{{{C_ImgBase}}}IconPolice.png" id="Quad_PoliceIcon" hidden="1" />
		<label pos="6 -.5" valign="center2" style="TextButtonNav" textemboss="1" textsize="3" textcolor="FFF" textfont="RajdhaniMono" id="Label_PoliceCount" hidden="1" />
	</frame>
</framemodel>

<frameinstance modelid="FrameModel_PoliceCount" id="Frame_PoliceCount#0" />
<frameinstance modelid="FrameModel_PoliceCount" id="Frame_PoliceCount#1" />
<frameinstance modelid="FrameModel_PoliceCount" id="Frame_PoliceCount#2" />
<frameinstance modelid="FrameModel_PoliceCount" id="Frame_PoliceCount#3" />

<script><!--
/**
 *	LibPursuitUI: PoliceCount
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

{{{ManialinkTools::Functions(["ComputeWidth"])}}}
{{{SplitScreen::Framework()}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare CMlFrame[] Frame_PoliceCount;
	for (I, 0, 3) Frame_PoliceCount.add((Page.GetFirstChild("Frame_PoliceCount#"^I) as CMlFrame));

	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	
	declare netread Integer[] Net_LibPursuitUI_ClansNbPlayers for Teams[0];
	declare netread Integer Net_LibPursuitUI_EscapingClan for Teams[0];
	wait(Net_LibPursuitUI_ClansNbPlayers.count == 3);
	
	declare persistent Persistent_LibPursuitUI_UseWideFormat for LocalUser = False;

	// ---------------------------------- //
	// Variables
	declare EscapingClan = 0;
	declare ClansNbPlayers = [0, 0, 0];
	declare NbPoliceAlive = 0;
	
	declare PrevSettingsUpdate = -1;
	declare PrevNbPolice = -1;
	declare PrevUseWideFormat = Persistent_LibPursuitUI_UseWideFormat;

	// ---------------------------------- //
	// Configure frames
	foreach (I => Frame in Frame_PoliceCount) {
		Frame.Visible = I == 0 || I < SplitScreen_NbPlayers();
		Frame.RelativePosition_V3 = SplitScreen_GetPosition(
			{{{C_LibPursuitUI_PoliceCountPos}}}, I,
			CMlControl::AlignHorizontal::Right,
			CMlControl::AlignVertical::Bottom,
			Persistent_LibPursuitUI_UseWideFormat
		);
		Frame.RelativeScale = SplitScreen_GetScale(1.);

		declare Label_PoliceCount	for Frame <=> (Frame.GetFirstChild("Label_PoliceCount") as CMlLabel);
		declare Quad_PoliceIcon		for Frame <=> (Frame.GetFirstChild("Quad_PoliceIcon") as CMlQuad);
		declare Frame_IconOffset	for Frame <=> (Frame.GetFirstChild("Frame_IconOffset") as CMlFrame);
	}
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		/*
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "PoliceCount_Display" : Frame_PoliceCount.Visible = SettingValue == "True";
					case "PoliceCount_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						for (I, 0, 1) Frame_PoliceCount.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
				}
			}
		}
		
		if (!Frame_PoliceCount.Visible) continue;
		*/

		if (PrevUseWideFormat != Persistent_LibPursuitUI_UseWideFormat) {
			PrevUseWideFormat = Persistent_LibPursuitUI_UseWideFormat;
			PrevNbPolice = -1;
		}
		
		EscapingClan = Net_LibPursuitUI_EscapingClan;
		for (I, 0, 2) ClansNbPlayers[I] = Net_LibPursuitUI_ClansNbPlayers[I];
		
		NbPoliceAlive = 0;
		if (EscapingClan > 0) NbPoliceAlive = ClansNbPlayers[3 - EscapingClan];
		
		// ---------------------------------- //
		// Update amount label
		if (PrevNbPolice != NbPoliceAlive) {
			PrevNbPolice = NbPoliceAlive;

			foreach (I => Frame in Frame_PoliceCount) {
				if (!Frame.Visible) continue;
				
				Frame.RelativePosition_V3 = SplitScreen_GetPosition(
					{{{C_LibPursuitUI_PoliceCountPos}}}, I,
					CMlControl::AlignHorizontal::Right,
					CMlControl::AlignVertical::Bottom,
					Persistent_LibPursuitUI_UseWideFormat
				);
				
				declare CMlLabel Label_PoliceCount	for Frame;
				declare CMlQuad Quad_PoliceIcon		for Frame;
				declare CMlFrame Frame_IconOffset	for Frame;

				Label_PoliceCount.Visible = NbPoliceAlive > 0;
				Quad_PoliceIcon.Visible = Label_PoliceCount.Visible;

				if (Label_PoliceCount.Visible) {
					Label_PoliceCount.Value = TL::ToText(NbPoliceAlive);
					Frame_IconOffset.RelativePosition_V3.X = (6 + ComputeWidth(Label_PoliceCount)) * -.5;
				}
			}
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the respawn timer module.
 *
 *	@return		The respawn timer manialink.
 */
Text Private_CreateManialinkRespawnTimer() {
	return """
<manialink version="3" name="LibPursuitUI:RespawnTimer">
<stylesheet>
	<style class="Font" halign="center" valign="center2" textsize="1" textemboss="1" textcolor="FFF" textfont="RajdhaniMono" />
</stylesheet>

<framemodel id="FrameModel_RespawnProgress">
	<frame id="Frame_RespawnProgAnim">
		<quad posn="0 8 -.1" sizen="12 12" halign="center" valign="center" id="Quad_RespawnProgIcon" opacity="0" />
		<label class="Font" textsize="3" id="Label_RespawnProgress" opacity="0" />
		<gauge posn="0 -3 -.1" sizen="52 8" halign="center" valign="center" drawbg="0" id="Gauge_RespawnProgress" hidden="1" />
		<frame pos="0 -6.5" id="Frame_RespawnIsCamper" hidden="1">
			<label class="Font" textprefix="$t" id="Label_CampWarningText" opacity="0" />
			<label pos="0 -3.5" class="Font" textsize="3" id="Label_RespawnCampDist" opacity="0" />
		</frame>
	</frame>
</framemodel>

<frameinstance modelid="FrameModel_RespawnProgress" id="Frame_RespawnProgress#0" />
<frameinstance modelid="FrameModel_RespawnProgress" id="Frame_RespawnProgress#1" />
<frameinstance modelid="FrameModel_RespawnProgress" id="Frame_RespawnProgress#2" />
<frameinstance modelid="FrameModel_RespawnProgress" id="Frame_RespawnProgress#3" />

<script><!--
/**
 *	LibPursuitUI: RespawnTimer
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_DisplayDuration	2000

{{{Translations::InsertToManialink(["Respawning...", "Camper! Move %1 meters away to cancel!"])}}}
{{{ManialinkTools::Functions(["SetGaugeRatio"])}}}
{{{SplitScreen::Framework()}}}
{{{C_LibPursuitUI_GetPlayerClan}}}
{{{C_LibPursuitUI_GetClanColor}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare CMlFrame[] Frame_RespawnProgress;
	for (I, 0, 3) Frame_RespawnProgress.add((Page.GetFirstChild("Frame_RespawnProgress#"^I) as CMlFrame));
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	declare netread Integer Net_LibPursuitUI_EscapingClan for Teams[0];

	// ---------------------------------- //
	// Variables
	declare DisplayRespawnProgress = False;
	declare RespawnProgressVisible = False;
	declare RespawnDuration = 0;
	declare UpdateInterfaceColor = True;
	declare FinishedRespawning = False;
	declare RespawnBaseMessage = "";
	
	declare PrevSettingsUpdate = -1;

	// ---------------------------------- //
	// Initialize frames layout
	foreach (I => Frame in Frame_RespawnProgress) {
		Frame.Visible = I == 0 || I < SplitScreen_NbPlayers();
		Frame.RelativePosition_V3 = SplitScreen_GetPosition({{{C_LibPursuitUI_RespawnTimerPos}}}, I, False);
		Frame.RelativeScale = SplitScreen_GetScale(1.);

		declare Frame_RespawnProgAnim	for Frame <=> (Frame.GetFirstChild("Frame_RespawnProgAnim") as CMlFrame);
		declare Label_RespawnProgress	for Frame <=> (Frame.GetFirstChild("Label_RespawnProgress") as CMlLabel);
		declare Quad_RespawnProgIcon	for Frame <=> (Frame.GetFirstChild("Quad_RespawnProgIcon") as CMlQuad);
		declare Gauge_RespawnProgress	for Frame <=> (Frame.GetFirstChild("Gauge_RespawnProgress") as CMlGauge);
		declare Frame_RespawnIsCamper	for Frame <=> (Frame.GetFirstChild("Frame_RespawnIsCamper") as CMlFrame);
		declare Label_CampWarningText	for Frame <=> (Frame.GetFirstChild("Label_CampWarningText") as CMlLabel);
		declare Label_RespawnCampDist	for Frame <=> (Frame.GetFirstChild("Label_RespawnCampDist") as CMlLabel);

		// Translations
		Label_CampWarningText.Value = Translate(["Camper! Move %1 meters away to cancel!", "50"]);
	}
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "RespawnTimer_Display" : DisplayRespawnProgress = SettingValue == "True";
					case "RespawnDuration" : {
						declare NewDuration = TL::ToInteger(SettingValue);
						if (NewDuration >= 0) RespawnDuration = NewDuration;
					}
				}
			}
		}

		foreach (I => Frame in Frame_RespawnProgress) {
			if (!Frame.Visible) continue;
			declare Player <=> SplitScreen_GetTmPlayer(I);

			// ---------------------------------- //
			// Frame elements
			declare CMlFrame Frame_RespawnProgAnim	for Frame;
			declare CMlLabel Label_RespawnProgress	for Frame;
			declare CMlQuad Quad_RespawnProgIcon	for Frame;
			declare CMlGauge Gauge_RespawnProgress	for Frame;
			declare CMlFrame Frame_RespawnIsCamper	for Frame;
			declare CMlLabel Label_CampWarningText	for Frame;
			declare CMlLabel Label_RespawnCampDist	for Frame;

			declare PrevRespawnProgressVisible for Frame = False;
			declare PrevPlayerId for Frame = NullId;
			declare PrevPlayerClan for Frame = -1;
			declare PrevFinishedRespawning for Frame = True;

			// ---------------------------------- //
			// Check if current player is respawning
			if (
				!DisplayRespawnProgress || Player == Null || !Player.IsSpawned ||
				Player.RaceStartTime <= 0 || GetClan(Player) != Net_LibPursuitUI_EscapingClan
			) {
				RespawnProgressVisible = False;
			} else {
				declare netread Integer Net_LibPursuitUI_RespawnStartTime for Player;
				RespawnProgressVisible = GameTime - C_DisplayDuration <= Net_LibPursuitUI_RespawnStartTime + RespawnDuration;
			}

			// ---------------------------------- //
			// Update respawn timer visibility
			if (PrevRespawnProgressVisible != RespawnProgressVisible) {
				PrevRespawnProgressVisible = RespawnProgressVisible;
				
				Gauge_RespawnProgress.Visible = RespawnProgressVisible;
				Frame_RespawnProgAnim.RelativePosition.Y = 0.;
				Label_RespawnProgress.Opacity = 1.;
				declare PositionY = -2.;
				declare Opacity = 0.;
				
				if (RespawnProgressVisible) {
					Frame_RespawnProgAnim.RelativePosition.Y = -PositionY;
					Label_RespawnProgress.Opacity = 0.;
					PositionY = 0.;
					Opacity = 1.;
				}
				
				AnimMgr.Add(Frame_RespawnProgAnim, "<frame pos='0 "^PositionY^"'/>", 125, CAnimManager::EAnimManagerEasing::Linear);
				AnimMgr.Add(Label_RespawnProgress, "<label opacity='"^Opacity^"' />", 125, CAnimManager::EAnimManagerEasing::Linear);
				AnimMgr.Add(Quad_RespawnProgIcon, "<quad opacity='"^Opacity^"' />", 125, CAnimManager::EAnimManagerEasing::Linear);
				AnimMgr.Add(Label_CampWarningText, "<quad opacity='"^Opacity^"' />", 125, CAnimManager::EAnimManagerEasing::Linear);
				AnimMgr.Add(Label_RespawnCampDist, "<quad opacity='"^Opacity^"' />", 125, CAnimManager::EAnimManagerEasing::Linear);
				
				// Play sound
				declare Sound = CAudioManager::ELibSound::ShowMenu;
				if (!RespawnProgressVisible) Sound = CAudioManager::ELibSound::HideMenu;
				Audio.PlaySoundEvent(Sound, 0, 0.);
			}
			
			if (!RespawnProgressVisible) continue;

			// Get the player's respawn time
			declare netread Integer Net_LibPursuitUI_RespawnStartTime for Player;
			declare TimeUntilRespawn = Net_LibPursuitUI_RespawnStartTime + RespawnDuration - GameTime;
		
			// Set respawn gauge ratio
			SetGaugeRatio(Gauge_RespawnProgress, 1 - ML::ToReal(TimeUntilRespawn) / RespawnDuration);
			
			// Update color on player change
			if (PrevPlayerId != Player.Id) {
				PrevPlayerId = Player.Id;
				UpdateInterfaceColor = True;
			}

			// Update color on clan change
			if (PrevPlayerClan != GetClan(Player)) {
				PrevPlayerClan = GetClan(Player);
				UpdateInterfaceColor = True;
			}

			// ---------------------------------- //
			// Update the gauge color
			if (UpdateInterfaceColor) {
				UpdateInterfaceColor = False;

				declare InterfaceColor = Player.User.Color;
				if (PrevPlayerClan > 0) InterfaceColor = GetClanColor(PrevPlayerClan);
				Gauge_RespawnProgress.Color = InterfaceColor;
			}

			FinishedRespawning = TimeUntilRespawn <= 0;

			// ---------------------------------- //
			// Update icon on respawn status change
			if (PrevFinishedRespawning != FinishedRespawning) {
				PrevFinishedRespawning = FinishedRespawning;

				declare IconURL = "{{{C_ImgBase}}}c_goal_shield.dds";
				if (FinishedRespawning) IconURL = "{{{C_ImgBase}}}c_goal_captured.dds";
				Quad_RespawnProgIcon.ImageUrl = IconURL;

				if (FinishedRespawning) RespawnBaseMessage = Translate("Respawned!");
				else RespawnBaseMessage = Translate("Respawning...");
				Label_RespawnProgress.Value = RespawnBaseMessage;
			}

			// Set respawn message text
			if (!FinishedRespawning) {
				declare SecondsToRespawn = ML::CeilingInteger(TimeUntilRespawn / 1000.);
				Label_RespawnProgress.Value = RespawnBaseMessage^" ("^SecondsToRespawn^")";
			}

			// ---------------------------------- //
			// Set camper warning visibility
			declare netread Boolean Net_LibPursuitUI_PlayerIsCamping for Player;
			Frame_RespawnIsCamper.Visible = Net_LibPursuitUI_PlayerIsCamping;

			// Respawn cancel distance
			if (Frame_RespawnIsCamper.Visible) {
				declare netread Vec3 Net_LibPursuitUI_PlayerCampingAnchor for Player;
				Label_RespawnCampDist.Value = ML::FloorInteger(ML::Distance(GUIPlayer.Position, Net_LibPursuitUI_PlayerCampingAnchor))^" M";
			}
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the police lights module
 *
 *	@return		The manialink
 */
Text Private_CreateManialinkPoliceLights() {
	return """
<manialink version="3" name="LibPursuitUI:PoliceLights">
<frame id="Frame_PoliceLights" pos="{{{C_LibPursuitUI_PoliceLightsPos.X^" "^C_LibPursuitUI_PoliceLightsPos.Y}}}" hidden="1">
	<quad pos="18 -.5" size="24 8" rot="180" halign="right" valign="center" style="EnergyBar" substyle="HeaderGaugeRight" id="Quad_LightBar1" opacity="0" />
	<quad pos="-18 -.5" size="24 8" rot="180" valign="center" style="EnergyBar" substyle="HeaderGaugeLeft" id="Quad_LightBar2" opacity="0" />
</frame>

<script><!--
/**
 *	LibPursuitUI: PoliceLights
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_AnimDuration 500

{{{Manialink::Animations(["EaseInOutSine"])}}}

// ---------------------------------- //
/** Get the clan of a player
 *
 *	@param	_Player		The player to get clan
 *
 *	@return		Player clan
 */
Integer GetPlayerClan(CTmMlPlayer _Player) {
	if (_Player == Null) return 0;
	declare netread Integer[Text] Net_LibPursuitUI_PlayersClans for Teams[0];
	if (!Net_LibPursuitUI_PlayersClans.existskey(_Player.User.Login)) return 0;
	return Net_LibPursuitUI_PlayersClans[_Player.User.Login];
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_PoliceLights <=> (Page.GetFirstChild("Frame_PoliceLights") as CMlFrame);
	declare Quad_LightBar1 <=> (Page.GetFirstChild("Quad_LightBar1") as CMlQuad);
	declare Quad_LightBar2 <=> (Page.GetFirstChild("Quad_LightBar2") as CMlQuad);
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	declare netread Integer Net_LibPursuitUI_EscapingClan for Teams[0];
	
	// ---------------------------------- //
	// Variables
	declare EscapingClan = 0;
	declare IsPlayerChasing = False;
	
	declare PrevIsPlayerChasing = False;
	declare PrevSettingsUpdate = -1;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "PoliceLights_Display" : Frame_PoliceLights.Visible = SettingValue == "True";
					case "PoliceLights_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						for (I, 0, 1) Frame_PoliceLights.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
				}
			}
		}
		
		if (!Frame_PoliceLights.Visible) continue;
		
		LibManialink_AnimLoop();
		
		EscapingClan = Net_LibPursuitUI_EscapingClan;
		
		// ---------------------------------- //
		// Determine if player is in chasing clan
		IsPlayerChasing = GUIPlayer != Null && GUIPlayer.IsSpawned && EscapingClan > 0 && GetPlayerClan(GUIPlayer) == 3 - EscapingClan;
		
		// ---------------------------------- //
		// Update lights visibility
		if (PrevIsPlayerChasing != IsPlayerChasing) {
			PrevIsPlayerChasing = IsPlayerChasing;
			
			declare Opacity = 0.;
			if (IsPlayerChasing) Opacity = 1.;
			
			for (I, 1, 2) LibManialink_Anim("<label id=\"Quad_LightBar"^I^"\" opacity="^Opacity^" />", C_AnimDuration, "EaseInOutSine");
		}
		
		if (!IsPlayerChasing) continue;
		
		// ---------------------------------- //
		// Blink the light bars
		declare Factor = (Now % 500) / 500.;
		if (Now % 1000 < 500) {
			Quad_LightBar1.Colorize = <Factor, .25, 1-Factor>;
			if (Now % 100 < 50) Quad_LightBar2.Colorize = <1-Factor, .25, Factor>;
			else Quad_LightBar2.Colorize = <1., 1., 1.>;
		} else {
			Quad_LightBar2.Colorize = <1-Factor, .25, Factor>;
			if (Now % 100 < 50) Quad_LightBar1.Colorize = <Factor, .25, 1-Factor>;
			else Quad_LightBar1.Colorize = <1., 1., 1.>;
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/* Create manialink for 321Go module
 *
 *	@return		The manialink
 */
Text Private_CreateManialink321Go() {
	declare Style = """size="24 24" halign="center" valign="center" style="321Go" """;
	return """
<manialink version="3" name="LibPursuitUI:321Go">
<frame id="Frame_321Go" pos="{{{C_LibPursuitUI_321GoPos.X^" "^C_LibPursuitUI_321GoPos.Y}}}">
	<quad {{{Style}}} substyle="3" id="Quad3" hidden="1" />
	<quad {{{Style}}} substyle="2" id="Quad2" hidden="1" />
	<quad {{{Style}}} substyle="1" id="Quad1" hidden="1" />
	<quad {{{Style}}} substyle="Go!" id="QuadGo" hidden="1" />
</frame>

<script><!--
/**
 *	LibPursuitUI: 321Go
 */

#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_321Go <=> (Page.GetFirstChild("Frame_321Go") as CMlFrame);
	declare CMlQuad[] Quads;
	Quads.add((Page.GetFirstChild("QuadGo") as CMlQuad));
	for (I, 1, 3) Quads.add((Page.GetFirstChild("Quad"^I) as CMlQuad));
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	
	// ---------------------------------- //
	// Variables
	declare Integer CurrentStep;
	declare Integer PrevStep;
	
	declare PrevSettingsUpdate = -1;

	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "321Go_Display" : Frame_321Go.Visible = SettingValue == "True";
					case "321Go_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						for (I, 0, 1) Frame_321Go.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
				}
			}
		}

		if (!Frame_321Go.Visible) continue;
		
		// ---------------------------------- //
		// Get current step
		if (GUIPlayer == Null || !GUIPlayer.IsSpawned) CurrentStep = -1;
		else CurrentStep = (GUIPlayer.RaceStartTime - GameTime + 500) / 500;
		
		// ---------------------------------- //
		// Display digits
		if (PrevStep != CurrentStep) {
			PrevStep = CurrentStep;
			
			if (CurrentStep >= 0 && CurrentStep <= 3)
				Audio.PlaySoundEvent(CAudioManager::ELibSound::Countdown, CurrentStep, 0.);
			
			foreach (Key => Quad in Quads) Quad.Visible = Key == CurrentStep;
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the Respawn and Bonus manialink
 *
 *	@return		The manialink string
 */
Text Private_CreateManialinkShowPoints() {
	return """
<manialink version="3" name="Pursuit:ShowPoints">
<stylesheet>
	<style id="Label_PointsAmt" textemboss="1" textsize="5" textcolor="FF0" textfont="RajdhaniMono" />
	<style id="Label_PointsDesc" textemboss="1" textsize="2" textcolor="FF0" textfont="RajdhaniMono" />
</stylesheet>

<frame id="Frame_ShowPoints" pos="{{{C_LibPursuitUI_ShowPointsPos.X^" "^C_LibPursuitUI_ShowPointsPos.Y}}}" scale="1">
	<frame id="Frame_Offset">
		<label valign="center2" id="Label_PointsAmt" />
		<label valign="center2" id="Label_PointsDesc" />
	</frame>
</frame>

<script><!--
/**
 *	LibPursuitUI: ShowPoints
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_AnimDuration		750		///< Duration of points animation
#Const C_PointsVisibleTime	4000	///< Duration of points label visibility

{{{Manialink::Animations(["EaseInCirc", "EaseOutCirc", "EaseInBack", "EaseOutBack"])}}}
{{{Translations::InsertToManialink(["For being the first officer", "For surviving another catch", "For catching a Thief", "For surviving to the end", "For being the last Thief"])}}}

// ---------------------------------- //
/** Compute width of the label text
 *
 *	@param	_Label	Label to check text length
 *
 *	@return		Width of the label text
 */
Real ComputeWidth(CMlLabel _Label) {
	if (_Label == Null) return 0.;
	return _Label.ComputeWidth(_Label.Value) * _Label.RelativeScale;
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_ShowPoints <=> (Page.GetFirstChild("Frame_ShowPoints") as CMlFrame);
	declare Label_PointsAmt <=> (Page.GetFirstChild("Label_PointsAmt") as CMlLabel);
	declare Label_PointsDesc <=> (Page.GetFirstChild("Label_PointsDesc") as CMlLabel);
	declare Frame_Offset <=> (Page.GetFirstChild("Frame_Offset") as CMlFrame);
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	declare netread Integer Net_LibPursuitUI_PointsChangeTime for UI;
	declare netread Integer Net_LibPursuitUI_PointsChangeAmount for UI;
	declare netread Text Net_LibPursuitUI_PointsChangeDesc for UI;
	
	// ---------------------------------- //
	// Variables
	declare DisplayPoints = True;
	declare PointsVisible = False;
	declare PointsVisibilityEndTime = -1;
	declare ResetSafeTime = Now + 3000;
	declare Animate = False;
	
	declare PrevSettingsUpdate = -1;
	declare PrevPointsChangeTime = -1;
	declare PrevPointsVisible = True;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		LibManialink_AnimLoop();
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "ShowPoints_Display" : DisplayPoints = SettingValue == "True";
					case "ShowPoints_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						for (I, 0, 1) Frame_ShowPoints.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
				}
			}
		}
		
		Frame_ShowPoints.Visible = DisplayPoints && InputPlayer != Null && !InputPlayer.RequestsSpectate;
		if (!Frame_ShowPoints.Visible) continue;
		
		// ---------------------------------- //
		// Show points bonus
		if (PrevPointsChangeTime != Net_LibPursuitUI_PointsChangeTime) {
			PrevPointsChangeTime = Net_LibPursuitUI_PointsChangeTime;
			
			Label_PointsAmt.SetText("+"^Net_LibPursuitUI_PointsChangeAmount);
			Label_PointsDesc.SetText("$t"^Translate(Net_LibPursuitUI_PointsChangeDesc));
			
			Label_PointsDesc.RelativePosition_V3.X = ComputeWidth(Label_PointsAmt) + 1;
			Frame_Offset.RelativePosition_V3.X = (ComputeWidth(Label_PointsAmt) + ComputeWidth(Label_PointsDesc) + 1) / -2;
			
			Frame_ShowPoints.RelativeScale = 1.5;
			Label_PointsAmt.Opacity = 0.;
			Label_PointsDesc.Opacity = 0.;
			
			PointsVisibilityEndTime = Now + C_PointsVisibleTime;
			PointsVisible = True;
			Animate = True;
		}
		
		// ---------------------------------- //
		// Animate points bonus
		if (Animate) {
			Animate = False;
			
			declare Easing = "EaseInCirc";
			declare Scale = .875;
			declare Opacity = 0;
			
			if (PointsVisible) {
				Easing = "EaseOutCirc";
				Scale = 1.;
				Opacity = 1;
			}
			
			if (Now >= ResetSafeTime) {
				LibManialink_Anim(Frame_ShowPoints, "<frame scale="^Scale^" />", C_AnimDuration, Easing);
				LibManialink_Anim(Label_PointsAmt, "<label opacity="^Opacity^" />", C_AnimDuration, Easing);
				LibManialink_Anim(Label_PointsDesc, "<label opacity="^Opacity^" />", C_AnimDuration, Easing);
			}
		}
		
		// ---------------------------------- //
		// Hide points bonus
		if (Now >= PointsVisibilityEndTime && PointsVisible) {
			PointsVisible = False;
			Animate = True;
		}
	}
}

--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create manialink for the police join window module.
 *
 *	@return		The police join window manialink.
 */
Text Private_CreateManialinkJoinPolice() {
	return """
<manialink version="3" name="LibPursuitUI:JoinPolice">
<stylesheet>
	<style class="Font" valign="center2" textemboss="1" textsize="2" textcolor="FFF" textfont="Oswald" />
</stylesheet>

<frame id="Frame_JoinPolice" pos="{{{C_LibPursuitUI_JoinPolicePos.X - 60^" "^C_LibPursuitUI_JoinPolicePos.Y}}}">
	<frame pos="0 24.5" size="90 8">
		<quad pos="1.25 -4" size="7 7" valign="center" image="{{{C_ImgBase}}}IconPolice.png" id="Quad_PoliceIcon" />
		<label pos="9 -4.375" size="48" class="Font" textsize="3" textprefix="$t" id="Label_WindowTitle" />
		<quad size="54 84" valign="center" rot="11.25" style="Bgs1" substyle="BgDialogBlur" />
	</frame>

	<frame pos="0 15.5" size="90 15">
		<label pos="1.5 -7.5" size="50" class="Font" autonewline="1" maxline="3" id="Label_InfoText" />
		<quad size="54 84" valign="center" rot="11.25" style="Bgs1" substyle="BgDialogBlur" />
	</frame>

	<frame pos="0 -.5" size="90 11">
		<label pos="1.5 -5.75" size="34" class="Font" autonewline="1" maxline="2" textfont="RajdhaniMono" textprefix="$t" id="Label_InfoToss" />
		<label pos="34 -6" class="Font" textsize="5" textfont="RajdhaniMono" id="Label_PlayerTossChance" />
		<quad size="54 84" valign="center" rot="11.25" style="Bgs1" substyle="BgDialogBlur" />
	</frame>

	<frame pos="0 -12.5" size="90 12">
		<label pos="1.5 -6.25" size="35" class="Font" textsize="1" autonewline="1" maxline="3" textfont="RajdhaniMono" textprefix="$t" id="Label_InfoAmount" />
		<label pos="35 -6.25" class="Font" textsize="4" textfont="RajdhaniMono" id="Label_RequestsCount" />
		<quad size="46 84" valign="center" rot="11.25" style="Bgs1" substyle="BgDialogBlur" />
	</frame>
</frame>

<label id="Label_DebugChance" scale="0" />

<script><!--
/**
 *	LibPursuitUI: JoinPolice
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

{{{Translations::InsertToManialink([
	"Become an officer", "Do you want to join the Police team? Press %1 to increase your chances of being selected!",
	"Your chance of being selected", "Number of players who want to join the Police team:"
])}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load UI elements
	declare Frame_JoinPolice		<=> (Page.GetFirstChild("Frame_JoinPolice") as CMlFrame);
	declare Frame_Background		<=> (Page.GetFirstChild("Frame_Background") as CMlFrame);
	declare Label_PlayerTossChance	<=> (Page.GetFirstChild("Label_PlayerTossChance") as CMlLabel);
	declare Label_RequestsCount		<=> (Page.GetFirstChild("Label_RequestsCount") as CMlLabel);
	declare Label_DebugChance		<=> (Page.GetFirstChild("Label_DebugChance") as CMlLabel);
	
	// ---------------------------------- //
	// Set translations
	Translate("Label_WindowTitle", "Become an officer");
	Translate("Label_InfoText", ["Do you want to join the Police team? Press %1 to increase your chances of being selected!", "$<$F00DELETE$>"]);
	Translate("Label_InfoToss", "Your chance of being selected");
	Translate("Label_InfoAmount", "Number of players who want to join the Police team:");
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	declare netread Integer[] Net_LibPursuitUI_ClansNbPlayers for Teams[0];
	declare netread Text[] Net_LibPursuitUI_PlayersVotingPolice for Teams[0];
	declare netread Integer Net_LibPursuitUI_PlayersVotingPoliceUpd for Teams[0];
	declare netread Text[] Net_LibPursuitUI_PrevFirstPolicemen for Teams[0];
	declare netread Integer Net_LibPursuitUI_PrevFirstPolicemenUpd for Teams[0];
	wait(Net_LibPursuitUI_ClansNbPlayers.count >= 3);
	
	// ---------------------------------- //
	// Variables
	declare JoinPoliceVisible = False;
	declare UpdateVotesAmount = True;
	declare MaxNbVotes = 1;
	declare PlayersNbTotal = 0;
	declare IsPlayerVoting = False;
	declare UpdateTossChance = True;
	declare PlayerTossChance = 0.;
	
	declare PrevSettingsUpdate = -1;
	declare PrevJoinPoliceVisible = False;
	declare PrevPlayersVotingUpdate = -1;
	declare PrevFirstPolicemenUpdate = -1;
	declare PrevMaxNbVotes = -1;
	declare PrevPlayersNbTotal = -1;
	declare PrevIsPlayerVoting = False;
	declare PrevPlayerTossChance = 0.;
	declare PrevDbgLabelScale = -2.;
	declare PrevGUIPlayerId = NullId;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "JoinPolice_Display" : JoinPoliceVisible = SettingValue == "True";
					case "MaxNbStartPolicemen" : MaxNbVotes = ML::Max(TL::ToInteger(SettingValue), 1);
				}
			}
		}
		
		// ---------------------------------- //
		// Set the window visibility
		if (PrevJoinPoliceVisible != JoinPoliceVisible) {
			PrevJoinPoliceVisible = JoinPoliceVisible;
			
			declare Easing = CAnimManager::EAnimManagerEasing::CircOut;
			declare PositionX = {{{C_LibPursuitUI_JoinPolicePos.X}}};
			
			if (!JoinPoliceVisible) {
				Easing = CAnimManager::EAnimManagerEasing::CircIn;
				PositionX -= 60;
			}
			
			AnimMgr.Add(
				Frame_JoinPolice,
				"<frame pos='"^PositionX^" "^Frame_JoinPolice.RelativePosition_V3.Y^"' />",
				250, Easing
			);
		}
		
		if (!JoinPoliceVisible) continue;

		// ---------------------------------- //
		// Show the amount of players who want to join Police team
		if (PrevPlayersVotingUpdate != Net_LibPursuitUI_PlayersVotingPoliceUpd) {
			PrevPlayersVotingUpdate = Net_LibPursuitUI_PlayersVotingPoliceUpd;
			UpdateVotesAmount = True;
		}
		if (PrevMaxNbVotes != MaxNbVotes) {
			PrevMaxNbVotes = MaxNbVotes;
			UpdateVotesAmount = True;
		}
		if (UpdateVotesAmount) {
			UpdateVotesAmount = False;
			UpdateTossChance = True;
			Label_RequestsCount.Value = Net_LibPursuitUI_PlayersVotingPolice.count^"/"^MaxNbVotes;
		}

		// GUIPlayer change
		if (GUIPlayer != Null) {
			if (PrevGUIPlayerId != GUIPlayer.Id) {
				PrevGUIPlayerId = GUIPlayer.Id;
				UpdateTossChance = True;
			}
		} else if (PrevGUIPlayerId != NullId) {
			PrevGUIPlayerId = NullId;
			UpdateTossChance = True;
		}

		// Get the total amount of players
		PlayersNbTotal = 0;
		foreach (Player in Players) if (!Player.RequestsSpectate) PlayersNbTotal += 1;
		
		// Update toss chance on players amount change
		if (PrevPlayersNbTotal != PlayersNbTotal) {
			PrevPlayersNbTotal = PlayersNbTotal;
			UpdateTossChance = True;
		} 

		// Update chance when GUIPlayer changes vote
		if (GUIPlayer != Null) IsPlayerVoting = Net_LibPursuitUI_PlayersVotingPolice.exists(GUIPlayer.User.Login);
		if (PrevIsPlayerVoting != IsPlayerVoting) {
			PrevIsPlayerVoting = IsPlayerVoting;
			UpdateTossChance = True;
		}

		// First policemen list update
		if (PrevFirstPolicemenUpdate != Net_LibPursuitUI_PrevFirstPolicemenUpd) {
			PrevFirstPolicemenUpdate = Net_LibPursuitUI_PrevFirstPolicemenUpd;
			UpdateTossChance = True;
		}

		// ---------------------------------- //
		// Update the current toss chance
		if (UpdateTossChance) {
			UpdateTossChance = False;

			declare NbPossiblePlayers = 0;
			foreach (Player in Players) {
				if (Net_LibPursuitUI_PrevFirstPolicemen.exists(Player.User.Login)) continue;
				if (Player.RequestsSpectate) continue;
				NbPossiblePlayers += 1;
			}

			if (GUIPlayer == Null) PlayerTossChance = -1.;
			else if (IsPlayerVoting) PlayerTossChance = ML::Clamp(ML::ToReal(MaxNbVotes) / Net_LibPursuitUI_PlayersVotingPolice.count, 0., 1.);
			else if (Net_LibPursuitUI_PlayersVotingPolice.count > 0) PlayerTossChance = 0.;
			else if (Net_LibPursuitUI_PrevFirstPolicemen.exists(GUIPlayer.User.Login)) PlayerTossChance = 0.;
			else if (NbPossiblePlayers > 0) PlayerTossChance = 1. / NbPossiblePlayers;
			else PlayerTossChance = 1.;

			declare FPartLength = 0;
			if (PlayerTossChance < 1) FPartLength = 1;
			if (PlayerTossChance < .1) FPartLength = 2;
			if (PlayerTossChance < .01) FPartLength = 3;

			if (PlayerTossChance >= 0) Label_PlayerTossChance.Value = TL::FormatReal(PlayerTossChance*100, FPartLength, True, True)^"%";
			else Label_PlayerTossChance.Value = "N/A";
		}
		
		// Smoothly change toss chance value
		if (PrevPlayerTossChance != PlayerTossChance) {
			PrevPlayerTossChance = PlayerTossChance;

			/*
			AnimMgr.Add(
				Label_DebugChance,
				"<label scale='"^ML::Clamp(PlayerTossChance, 0., 1.)^"' />",
				500, CAnimManager::EAnimManagerEasing::SineInOut
			);
			*/
		}
		
		/*
		// Set the toss chance label value
		if (PrevDbgLabelScale != Label_DebugChance.RelativeScale) {
			PrevDbgLabelScale = Label_DebugChance.RelativeScale;

			if (PlayerTossChance >= 0) Label_PlayerTossChance.Value = ML::NearestInteger(PrevDbgLabelScale * 100)^"%";
			else Label_PlayerTossChance.Value = "N/A";
		}
		*/
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the police lights module
 *
 *	@return		The manialink
 */
Text Private_CreateManialinkDetector() {
	return """
<manialink version="3" name="LibPursuitUI:Detector">
<frame id="Frame_Detector" pos="{{{C_LibPursuitUI_PoliceLightsPos.X^" "^C_LibPursuitUI_PoliceLightsPos.Y}}}" hidden="1">
	<quad pos="18 -.5" size="24 8" rot="180" halign="right" valign="center" style="EnergyBar" substyle="HeaderGaugeRight" id="Quad_LightBar1" opacity="0" colorize="F00" />
	<quad pos="-18 -.5" size="24 8" rot="180" valign="center" style="EnergyBar" substyle="HeaderGaugeLeft" id="Quad_LightBar2" opacity="0" colorize="F00" />
</frame>

<script><!--
/**
 *	LibPursuitUI: Detector
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_DetectorRadius 256.

// ---------------------------------- //
/** Get the clan of a player
 *
 *	@param	_Player		The player to get clan
 *
 *	@return		Player clan
 */
Integer GetPlayerClan(CTmMlPlayer _Player) {
	if (_Player == Null) return 0;
	declare netread Integer[Text] Net_LibPursuitUI_PlayersClans for Teams[0];
	if (!Net_LibPursuitUI_PlayersClans.existskey(_Player.User.Login)) return 0;
	return Net_LibPursuitUI_PlayersClans[_Player.User.Login];
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_Detector <=> (Page.GetFirstChild("Frame_Detector") as CMlFrame);
	declare Quad_LightBar1 <=> (Page.GetFirstChild("Quad_LightBar1") as CMlQuad);
	declare Quad_LightBar2 <=> (Page.GetFirstChild("Quad_LightBar2") as CMlQuad);
	
	// ---------------------------------- //
	// Netcode
	declare netread Integer Net_LibPursuitUI_SettingsUpdate for Teams[0];
	declare netread Text[Text] Net_LibPursuitUI_Settings for Teams[0];
	
	// ---------------------------------- //
	// Variables
	declare DisplayDetector = True;
	declare NearestPolicemanDist = 0.;
	
	declare PrevSettingsUpdate = -1;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update settings
		if (PrevSettingsUpdate != Net_LibPursuitUI_SettingsUpdate) {
			PrevSettingsUpdate = Net_LibPursuitUI_SettingsUpdate;
			
			foreach (SettingName => SettingValue in Net_LibPursuitUI_Settings) {
				switch (SettingName) {
					case "Detector_Display" : DisplayDetector = SettingValue == "True";
					case "PoliceLights_Position" : {
						declare Splitpos = TL::Split(" ", SettingValue);
						if (Splitpos.count < 3) continue;
						for (I, 0, 1) Frame_Detector.RelativePosition_V3[I] = TL::ToReal(Splitpos[I]);
					}
				}
			}
		}
		
		Frame_Detector.Visible = DisplayDetector && GUIPlayer != Null && GUIPlayer.IsSpawned && GetPlayerClan(GUIPlayer) == 2;
		if (!Frame_Detector.Visible) continue;
		
		// ---------------------------------- //
		// Get the closest Policeman distance
		NearestPolicemanDist = 0.;
		foreach (Player in Players) {
			if (!Player.IsSpawned || Player.Position == <0., 0., 0.> || GetPlayerClan(Player) != 1) continue;
			
			declare Distance = ML::Distance(GUIPlayer.Position, Player.Position);
			if (NearestPolicemanDist <= 0 || Distance < NearestPolicemanDist) NearestPolicemanDist = Distance;
		}
		
		// ---------------------------------- //
		// Set the opacity of the lights
		declare Opacity = 0.;
		if (NearestPolicemanDist > 0 && NearestPolicemanDist <= C_DetectorRadius)
			Opacity = 1 - (NearestPolicemanDist / C_DetectorRadius);
		
		Quad_LightBar1.Opacity = Opacity;
		Quad_LightBar2.Opacity = Opacity;
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script.
 *
 *	@return		The version number of the script.
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script.
 *
 *	@return		The name of the script.
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Display a module.
 *
 *	@param	_ModuleName		The name of the module to set.
 *	@param	_Display		Show or not the module.
 */
Void SetModuleVisibility(Text _ModuleName, Boolean _Display) {
	if (Private_ModuleIsLoaded(_ModuleName)) {
		switch (_ModuleName) {
			case "Countdown"	: UIManager.UIAll.OverlayHideCountdown = True;
			case "Speedometer"	: UIManager.UIAll.OverlayHideSpeedAndDist = True;
			case "Background"	: UIManager.UIAll.OverlayHideBackground = True;
			case "SpecInfo"		: UIManager.UIAll.OverlayHideSpectatorInfos = True;
			case "321Go"		: UIManager.UIAll.OverlayHide321Go = True;
		}
		Private_SetModuleSetting(_ModuleName^"_Display", TL::ToText(_Display));
	} else {
		switch (_ModuleName) {
			case "Countdown"	: UIManager.UIAll.OverlayHideCountdown = !_Display;
			case "Speedometer"	: UIManager.UIAll.OverlayHideSpeedAndDist = !_Display;
			case "Background"	: UIManager.UIAll.OverlayHideBackground = !_Display;
			case "SpecInfo"		: UIManager.UIAll.OverlayHideSpectatorInfos = !_Display;
			case "321Go"		: UIManager.UIAll.OverlayHide321Go = !_Display;
		}
	}
	G_LibPursuitUI_ModuleVisibility[_ModuleName] = _Display;
}

// ---------------------------------- //
/** Get the visibility of a module.
 *
 *	@param	_ModuleName		The name of the module to get.
 *
 *	@return		True if the module is visible, False otherwise.
 */
Boolean GetModuleVisibility(Text _ModuleName) {
	if (Private_ModuleIsLoaded(_ModuleName) && G_LibPursuitUI_ModuleVisibility.existskey(_ModuleName))
		return G_LibPursuitUI_ModuleVisibility[_ModuleName];
	
	switch (_ModuleName) {
		case "Countdown"	: return !UIManager.UIAll.OverlayHideCountdown;
		case "Speedometer"	: return !UIManager.UIAll.OverlayHideSpeedAndDist;
		case "Background"	: return !UIManager.UIAll.OverlayHideBackground;
		case "SpecInfo"		: return !UIManager.UIAll.OverlayHideSpectatorInfos;
		case "321Go"		: return !UIManager.UIAll.OverlayHide321Go;
	}
	
	return False;
}

// ---------------------------------- //
/** Set the CutOffTimeLimit.
 *
 *	@param	_CutOffTimeLimit	The new value of the CutOffTimeLimit.
 */
Void SetCutOffTimeLimit(Integer _CutOffTimeLimit) {
	Private_SetModuleSetting("Countdown_CutOffTimeLimit", TL::ToText(_CutOffTimeLimit));
}

// ---------------------------------- //
/** Set the StartTime.
 *
 *	@param	_StartTime	The new value of the StartTime.
 */
Void SetStartTime(Integer _StartTime) {
	Private_SetModuleSetting("StartTime", TL::ToText(_StartTime));
}

// ---------------------------------- //
/** Set the currently escaping clan.
 *
 *	@param	_EscapingClan	The new escaping clan.
 */
Void SetEscapingClan(Integer _EscapingClan) {
	declare netwrite Integer Net_LibPursuitUI_EscapingClan for Teams[0];
	Net_LibPursuitUI_EscapingClan = _EscapingClan;
}

// ---------------------------------- //
/** Set the safe time duration.
 *
 *	@param	_SafeDuration		The new value of safe time.
 */
Void SetSafeTimeDuration(Integer _SafeDuration) {
	Private_SetModuleSetting("SafeTime_Duration", TL::ToText(_SafeDuration));
}

// ---------------------------------- //
/** Set the max amount of policemen starting.
 *
 *	@param	_MaxNbStartPolicemen	The max amount of policemen starting.
 */
Void SetMaxNbStartPolicemen(Integer _MaxNbStartPolicemen) {
	Private_SetModuleSetting("MaxNbStartPolicemen", TL::ToText(_MaxNbStartPolicemen));
}

// ---------------------------------- //
/** Set the respawn duration.
 *
 *	@param	_RespawnDuration	The new value of respawn duration.
 */
Void SetRespawnDuration(Integer _RespawnDuration) {
	Private_SetModuleSetting("RespawnDuration", TL::ToText(_RespawnDuration));
}

// ---------------------------------- //
/** Set the max engine RPM value.
 *
 *	@param	_EngineMaxRPM	New engine max RPM value.
 */
Void SetGlobalEngineMaxRPM(Real _EngineMaxRPM) {
	Private_SetModuleSetting("EngineMaxRPM", TL::ToText(_EngineMaxRPM));
}

// ---------------------------------- //
/** Set  if the camera 7 is forbidden.
 *
 *	@param	_Camera7Forbidden	If True, camera will return to 2 if attempting to use camera 7.
 */
Void SetCamera7Forbidden(Boolean _Camera7Forbidden) {
	Private_SetModuleSetting("Camera7Forbidden", TL::ToText(_Camera7Forbidden));
}

// ---------------------------------- //
/** Set a player's max engine RPM value.
 *
 *	@param	_EngineMaxRPM	New player's engine max RPM value.
 */
Void SetPlayerEngineMaxRPM(CTmPlayer _Player, Real _EngineMaxRPM) {
	if (_Player == Null) return;
	declare netwrite Real Net_LibPursuitUI_PlayerEngineMaxRPM for _Player;
	Net_LibPursuitUI_PlayerEngineMaxRPM = _EngineMaxRPM;
}

// ---------------------------------- //
/** Set the clans players amount.
 *
 *	@param	_Clan1	Alive players in clan 1.
 *	@param	_Clan2	Alive players in clan 2.
 */
Void SetClansNbPlayers(Integer _Clan1, Integer _Clan2) {
	declare netwrite Integer[] Net_LibPursuitUI_ClansNbPlayers for Teams[0];
	Net_LibPursuitUI_ClansNbPlayers = [0, _Clan1, _Clan2];
}

// ---------------------------------- //
/** Set the player's respawn start time.
 *
 *	@param	_Player		The player to update respawn start time.
 *	@param	_StartTime	Start time of the player's repawn request.
 */
Void SetPlayerRespawnStartTime(CTmPlayer _Player, Integer _StartTime) {
	if (_Player == Null) return;
	declare netwrite Integer Net_LibPursuitUI_RespawnStartTime for _Player;
	Net_LibPursuitUI_RespawnStartTime = _StartTime;
}

// ---------------------------------- //
/** Set the player's camping status.
 *
 *	@param	_Player				The player to update camping status.
 *	@param	_IsCamping			Whether the player is camping or not.
 *	@param	_AnchorPosition		Coordinates where camping was detected.
 */
Void SetPlayerRespawnIsCamping(CTmPlayer _Player, Boolean _IsCamping, Vec3 _AnchorPosition) {
	if (_Player == Null) return;
	declare netwrite Boolean Net_LibPursuitUI_PlayerIsCamping for _Player;
	declare netwrite Vec3 Net_LibPursuitUI_PlayerCampingAnchor for _Player;
	Net_LibPursuitUI_PlayerIsCamping = _IsCamping;
	Net_LibPursuitUI_PlayerCampingAnchor = _AnchorPosition;
}

// ---------------------------------- //
/** Display incoming points on UI
 *
 *	@param	_Player		A Player to display message
 *	@param	_Points		Points amount
 *	@param	_Reason		Message description
 */
Void ShowPoints(CTmPlayer _Player, Integer _Points, Text _Reason) {
	if (_Player == Null || _Points == 0 || _Reason == "") return;
	declare UI for _Player = UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare netwrite Integer Net_LibPursuitUI_PointsChangeTime for UI;
	declare netwrite Integer Net_LibPursuitUI_PointsChangeAmount for UI;
	declare netwrite Text Net_LibPursuitUI_PointsChangeDesc for UI;
	
	Net_LibPursuitUI_PointsChangeTime = Now;
	Net_LibPursuitUI_PointsChangeAmount = _Points;
	Net_LibPursuitUI_PointsChangeDesc = _Reason;
}

// ---------------------------------- //
/** Set which players are voting to join the Police team.
 *
 *	@param	_PlayersIds		Ids of players who are voting to join the Police team.
 */
Void SetPlayersVotingPolice(Ident[] _PlayersIds) {
	declare netwrite Text[] Net_LibPursuitUI_PlayersVotingPolice for Teams[0];
	declare netwrite Integer Net_LibPursuitUI_PlayersVotingPoliceUpd for Teams[0];
	Net_LibPursuitUI_PlayersVotingPolice.clear();
	Net_LibPursuitUI_PlayersVotingPoliceUpd = Now;
	
	foreach (PlayerId in _PlayersIds) {
		if (!Players.existskey(PlayerId)) continue;
		Net_LibPursuitUI_PlayersVotingPolice.add(Players[PlayerId].User.Login);
	}
}

// ---------------------------------- //
/** Set the login of the last thief of previous round.
 *
 *	@param	_LastThiefLogin		Previous round's last thief login.
 */
Void SetPrevRoundLastThief(Text _LastThiefLogin) {
	Private_SetModuleSetting("LastThiefLogin", _LastThiefLogin);
}

// ---------------------------------- //
/** Set list of logins of players who were first policeman.
 *
 *	@param	_FirstPolicemen		List of all first policemen.
 */
Void SetFirstPolicemenList(Text[] _FirstPolicemen) {
	declare netwrite Text[] Net_LibPursuitUI_PrevFirstPolicemen for Teams[0];
	declare netwrite Integer Net_LibPursuitUI_PrevFirstPolicemenUpd for Teams[0];
	Net_LibPursuitUI_PrevFirstPolicemen = _FirstPolicemen;
	Net_LibPursuitUI_PrevFirstPolicemenUpd = Now;
}

// ---------------------------------- //
/** Set the clan of a player.
 *
 *	@param	_Player		The player to set their clan.
 *	@param	_Clan		New clan of a player.
 */
Void SetPlayerClan(CTmPlayer _Player, Integer _Clan) {
	if (_Player == Null) return;
	declare netwrite Integer Net_LibPursuitUI_PlayerClan for _Player;
	Net_LibPursuitUI_PlayerClan = _Clan;
}

// ---------------------------------- //
/** Set the color of a clan.
 *
 *	@param	_Clan		Clan to set color.
 *	@param	_Color		Color of the clan.
 */
Void SetTeamColor(Integer _Clan, Vec3 _Color) {
	if (_Clan <= 0) return;
	declare netwrite Vec3[Integer] Net_LibPursuitUI_CustomTeamsColors for Teams[0];
	Net_LibPursuitUI_CustomTeamsColors[_Clan] = _Color;
}

// ---------------------------------- //
/// Library common loop.
Void Loop() {
	if (G_LibPursuitUI_PrevCutOffTimeLimit != CutOffTimeLimit) {
		G_LibPursuitUI_PrevCutOffTimeLimit = CutOffTimeLimit;
		SetCutOffTimeLimit(CutOffTimeLimit);
	}

	if (G_LibPursuitUI_PrevMapModelName != MapPlayerModelName) {
		G_LibPursuitUI_PrevMapModelName = MapPlayerModelName;

		declare RPM = 10000.;
		if (MapPlayerModelName == "StadiumCar") RPM = 11000.;
		SetGlobalEngineMaxRPM(RPM);
	}
}

// ---------------------------------- //
/// Loop for the Pursuit mode.
Void LoopFFA() {
	if (UseClans) SetClansNbPlayers(ClansNbPlayers[1], ClansNbPlayers[2]);
	else SetClansNbPlayers(Clans::GetClanNbPlayers(1), Clans::GetClanNbPlayers(2));
}

// ---------------------------------- //
/// Loop for the Pursuit PRO mode.
Void LoopPRO() {
	declare ClansNbPlayersAlive = [0, 0, 0];
	foreach (Player in Players) {
		if (Player.IsSpawned && Player.RaceStartTime >= 0) ClansNbPlayersAlive[Player.CurrentClan] += 1;
	}
	SetClansNbPlayers(ClansNbPlayersAlive[1], ClansNbPlayersAlive[2]);
}

// ---------------------------------- //
/** Load a module.
 *
 *	@param	_ModuleId		The name of the module to load.
 */
Void LoadModule(Text _ModuleId) {
	if (Private_ModuleIsLoaded(_ModuleId)) return;
	G_LibPursuitUI_ModulesLoaded.add(_ModuleId);
	
	SetModuleVisibility(_ModuleId, True);
	
	switch (_ModuleId) {
		case "Countdown"	: Layers::Create(_ModuleId, Private_CreateManialinkCountdown());
		case "Speedometer"	: Layers::Create(_ModuleId, Private_CreateManialinkSpeedometer());
		case "Background"	: Layers::Create(_ModuleId, Private_CreateManialinkBackground());
		case "SpecInfo"		: Layers::Create(_ModuleId, Private_CreateManialinkSpecInfo());
		case "ScoreSummary"	: Layers::Create(_ModuleId, Private_CreateManialinkScoreSummary());
		case "ThievesCount"	: Layers::Create(_ModuleId, Private_CreateManialinkThievesCount());
		case "RespawnTimer"	: Layers::Create(_ModuleId, Private_CreateManialinkRespawnTimer());
		case "PoliceCount"	: Layers::Create(_ModuleId, Private_CreateManialinkPoliceCount());
		case "PoliceLights"	: Layers::Create(_ModuleId, Private_CreateManialinkPoliceLights());
		case "321Go"		: Layers::Create(_ModuleId, Private_CreateManialink321Go());
		case "ShowPoints"	: Layers::Create(_ModuleId, Private_CreateManialinkShowPoints());
		case "Detector"		: Layers::Create(_ModuleId, Private_CreateManialinkDetector());
		case "JoinPolice"	: {
			Layers::Create(_ModuleId, Private_CreateManialinkJoinPolice());
			SetModuleVisibility(_ModuleId, False);
		}
	}
	
	Layers::Attach(_ModuleId);
}

// ---------------------------------- //
/** Load several modules.
 *
 *	@param	_ModulesIds		A list of modules to load with the library.
 */
Void LoadModules(Text[] _ModulesIds) {
	foreach (ModuleId in _ModulesIds) LoadModule(ModuleId);
}

// ---------------------------------- //
/** Unload a module.
 *
 *	@param	_ModuleId		The name of the module to unload.
 */
Void UnloadModule(Text _ModuleId) {
	if (!G_LibPursuitUI_ModulesLoaded.remove(_ModuleId)) return;
	
	// Remove module layer
	Layers::Detach(_ModuleId);
	Layers::Destroy(_ModuleId);
	SetModuleVisibility(_ModuleId, True);
}

// ---------------------------------- //
/// Unload the library.
Void Unload() {
	foreach (ModuleId in G_LibPursuitUI_ModulesLoaded) UnloadModule(ModuleId);	
	
	declare netwrite Net_LibPursuitUI_SettingsUpdate for Teams[0] = 0;
	declare netwrite Net_LibPursuitUI_Settings for Teams[0] = Text[Text];
	Net_LibPursuitUI_SettingsUpdate = 0;
	Net_LibPursuitUI_Settings.clear();
	
	G_LibPursuitUI_ModulesLoaded.clear();
	G_LibPursuitUI_ModuleVisibility.clear();
	G_LibPursuitUI_ModulePosition.clear();
	G_LibPursuitUI_PrevCutOffTimeLimit = -1;
	
	SetPlayersVotingPolice(Ident[]);
}

// ---------------------------------- //
/// Load the library.
Void Load() {
	Unload();
}

// ---------------------------------- //
/** (Overload) Load the library with some modules.
 *
 *	@param	_AutoLoadModules		A list of modules to load with the library.
 */
Void Load(Text[] _AutoLoadModules) {
	Load();
	LoadModules(_AutoLoadModules);
}